{"version":3,"file":"static/js/876.78b9c149.chunk.js","mappings":"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","sources":["pages/Profile.js"],"sourcesContent":["import React, { useState, useContext } from \"react\";\r\nimport { useQuery } from \"react-query\";\r\nimport styled from \"styled-components\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Circles } from \"react-loader-spinner\";\r\nimport { fetchUserEmail } from \"../utils/apiFetchFunctions\";\r\nimport userDefault from \"../assets/user.png\";\r\nimport { CurrentUserContext } from \"../components/context/CurrentUserContext\";\r\n\r\nconst Profile = () => {\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // state for updating user info\r\n  const [updateInfo, setUpdateInfo] = useState({\r\n    username: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n    email: \"\",\r\n    picture: \"\",\r\n  });\r\n\r\n  const [passwordHasError, setPasswordHasError] = useState(false);\r\n\r\n  const [pictureLoading, setPictureLoading] = useState(false);\r\n\r\n  // using useNavigate hook to redirect user\r\n  const navigate = useNavigate();\r\n\r\n  // get user information from current user context hook\r\n  const { user } = useContext(CurrentUserContext);\r\n\r\n  //fetch user email\r\n  const { data: email } = useQuery(\r\n    [\"userEmail\", user?._id],\r\n    () => fetchUserEmail(user?._id),\r\n    {\r\n      staleTime: 5000,\r\n      enabled: !!user?._id,\r\n    }\r\n  );\r\n\r\n  // upload picture to cloudinary\r\n  const postPictureToCloudinary = async (picture) => {\r\n    setPictureLoading(true);\r\n    if (picture.type === \"image/jpeg\" || picture.type === \"image/png\") {\r\n      const data = new FormData();\r\n      data.append(\"file\", picture);\r\n      data.append(\"upload_preset\", \"laghata-app\");\r\n      data.append(\"cloud_name\", \"laghata\");\r\n\r\n      try {\r\n        const postPicture = await fetch(\r\n          `${process.env.REACT_APP_CLOUDINARY_url}`,\r\n          {\r\n            method: \"POST\",\r\n            body: data,\r\n          }\r\n        );\r\n        const responseJson = await postPicture.json();\r\n\r\n        setUpdateInfo({\r\n          ...updateInfo,\r\n          picture: responseJson.secure_url.toString(),\r\n        });\r\n        setPictureLoading(false);\r\n      } catch (error) {\r\n        console.log(error.stack);\r\n        setPictureLoading(false);\r\n      }\r\n    } else {\r\n      setPictureLoading(false);\r\n    }\r\n  };\r\n\r\n  // update user info to the database\r\n  const updateHandler = (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n\r\n    try {\r\n      if (\r\n        updateInfo.password.toLowerCase() !==\r\n        updateInfo.confirmPassword.toLowerCase()\r\n      ) {\r\n        setPasswordHasError(true);\r\n        setLoading(false);\r\n        return;\r\n      } else {\r\n        const requestOptions = {\r\n          method: \"PATCH\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n          body: JSON.stringify(updateInfo),\r\n        };\r\n        // function that update user information\r\n        const UpdateUserInfo = async () => {\r\n          if (user?._id) {\r\n            const response = await fetch(\r\n              `${process.env.REACT_APP_BACKEND_URL}/api/user/${user?._id}`,\r\n              requestOptions\r\n            );\r\n\r\n            const parseResponse = await response.json();\r\n\r\n            if (parseResponse) {\r\n              localStorage.setItem(\"token\", parseResponse?.data?.token);\r\n\r\n              setUpdateInfo({\r\n                username: \"\",\r\n                password: \"\",\r\n                confirmPassword: \"\",\r\n                email: \"\",\r\n                picture: \"\",\r\n              });\r\n\r\n              setLoading(false);\r\n              navigate(\"/\");\r\n            }\r\n          }\r\n        };\r\n        UpdateUserInfo();\r\n      }\r\n    } catch (error) {\r\n      console.log(error.stack);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // handle input changes\r\n  const handleChange = (e) => {\r\n    setUpdateInfo((prev) => ({ ...prev, [e.target.name]: e.target.value }));\r\n  };\r\n\r\n  return (\r\n    <ProfileContainer>\r\n      {!user?.isVerified && (\r\n        <VerifyEmail>\r\n          You need to verify your email before making any changes\r\n        </VerifyEmail>\r\n      )}\r\n      {user && email ? (\r\n        <Details>\r\n          <Header>\r\n            {user.picture ? (\r\n              <Img src={user.picture} alt=\"profile\" />\r\n            ) : (\r\n              <Img src={userDefault} alt=\"User profile picture\" />\r\n            )}\r\n            <div>\r\n              <UserName>{user?.username}</UserName>\r\n              <Email>{email}</Email>\r\n            </div>\r\n          </Header>\r\n          <UpdateInfo>\r\n            <form onSubmit={updateHandler}>\r\n              <UpdateTitle>Update Info:</UpdateTitle>\r\n\r\n              <InputsDiv>\r\n                <Input\r\n                  type=\"text\"\r\n                  name=\"username\"\r\n                  placeholder=\"Username\"\r\n                  onChange={handleChange}\r\n                  required\r\n                />\r\n                <Input\r\n                  type=\"password\"\r\n                  name=\"password\"\r\n                  placeholder=\"Password\"\r\n                  onChange={handleChange}\r\n                  required\r\n                />\r\n                <Input\r\n                  type=\"password\"\r\n                  name=\"confirmPassword\"\r\n                  placeholder=\"Confirm Password\"\r\n                  onChange={handleChange}\r\n                  required\r\n                />\r\n                {passwordHasError && (\r\n                  <Span>Please check that your passwords match</Span>\r\n                )}\r\n                <Input\r\n                  type=\"email\"\r\n                  name=\"email\"\r\n                  placeholder=\"Email\"\r\n                  onChange={handleChange}\r\n                  required\r\n                />\r\n                <InputPicture\r\n                  type=\"file\"\r\n                  name=\"file\"\r\n                  id=\"file\"\r\n                  className=\"inputfile\"\r\n                  accept=\"/image/*\"\r\n                  onChange={(e) => {\r\n                    postPictureToCloudinary(e.target.files[0]);\r\n                  }}\r\n                />\r\n                <Label htmlFor=\"file\">Choose a picture</Label>\r\n              </InputsDiv>\r\n              {pictureLoading ? (\r\n                <Circles\r\n                  height=\"30\"\r\n                  width=\"30\"\r\n                  color=\"#54cbe3\"\r\n                  ariaLabel=\"circles-loading\"\r\n                  wrapperClass=\"spinnerPicture\"\r\n                  visible={true}\r\n                />\r\n              ) : (\r\n                updateInfo.picture && (\r\n                  <ImgContainer>\r\n                    <UpdateImg src={updateInfo.picture} alt=\"profile Picture\" />\r\n                  </ImgContainer>\r\n                )\r\n              )}\r\n              {!user?.isVerified ? (\r\n                <button disabled={user?.isVerified} className=\"disabledBtn\">\r\n                  Submit\r\n                </button>\r\n              ) : (\r\n                <Button type=\"submit\">\r\n                  {loading ? (\r\n                    <Circles\r\n                      height=\"30\"\r\n                      width=\"30\"\r\n                      color=\"#54cbe3\"\r\n                      ariaLabel=\"circles-loading\"\r\n                      wrapperClass=\"spinner\"\r\n                      visible={true}\r\n                    />\r\n                  ) : (\r\n                    \"Submit\"\r\n                  )}\r\n                </Button>\r\n              )}\r\n            </form>\r\n          </UpdateInfo>\r\n        </Details>\r\n      ) : (\r\n        <Circles\r\n          height=\"35\"\r\n          width=\"35\"\r\n          color=\"#010101\"\r\n          ariaLabel=\"circles-loading\"\r\n          wrapperClass=\"spinner\"\r\n          visible={true}\r\n        />\r\n      )}\r\n    </ProfileContainer>\r\n  );\r\n};\r\n\r\n// profile page style\r\nconst ProfileContainer = styled.div`\r\n  min-height: 100vh;\r\n  padding-bottom: 150px;\r\n  position: relative;\r\n\r\n  .spinner {\r\n    margin-top: 10rem;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n`;\r\n\r\nconst VerifyEmail = styled.div`\r\n  border: 1px solid;\r\n  width: fit-content;\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  background: #f5f0ed;\r\n  margin: 20px auto 0 auto;\r\n  font-weight: 500;\r\n`;\r\n\r\nconst Details = styled.div`\r\n  width: 70%;\r\n  max-width: 1300px;\r\n  display: flex;\r\n  gap: 3rem;\r\n  align-items: flex-start;\r\n  justify-content: center;\r\n  margin: 2.5rem auto 0 auto;\r\n  padding: 5px 10px;\r\n\r\n  @media screen and (max-width: 1200px) {\r\n    flex-direction: column;\r\n    gap: 1rem;\r\n    width: 100%;\r\n    align-items: center;\r\n  }\r\n`;\r\n\r\nconst Header = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  height: 150px;\r\n  gap: 1.5rem;\r\n  margin: 30px 0 40px 50px;\r\n\r\n  @media screen and (max-width: 700px) {\r\n    width: 80%;\r\n    margin: 30px auto;\r\n  }\r\n`;\r\n\r\nconst UserName = styled.h2`\r\n  font-size: 30px;\r\n  font-weight: 500;\r\n  text-transform: capitalize;\r\n`;\r\n\r\nconst Email = styled.p`\r\n  font-size: 20px;\r\n`;\r\n\r\nconst Img = styled.img`\r\n  border-radius: 50%;\r\n  margin-top: 30px;\r\n  width: 190px;\r\n  height: 190px;\r\n  object-fit: cover;\r\n\r\n  @media screen and (max-width: 700px) {\r\n    width: 130px;\r\n    height: 130px;\r\n  }\r\n`;\r\n\r\nconst UpdateInfo = styled.div`\r\n  border-radius: 10px;\r\n  border: 1px solid;\r\n  height: fit-content;\r\n  margin-bottom: 15px;\r\n  margin-top: 25px;\r\n  display: flex;\r\n  align-items: center;\r\n  box-shadow: rgba(149, 157, 165, 0.2) 0px 8px 24px;\r\n  flex-direction: column;\r\n  gap: 1.5rem;\r\n  width: 80%;\r\n\r\n  form {\r\n    width: 80%;\r\n    margin: 0 auto;\r\n  }\r\n\r\n  .spinnerPicture,\r\n  .spinner {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n\r\n  .spinnerPicture {\r\n    margin-top: 20px;\r\n  }\r\n\r\n  .disabledBtn {\r\n    padding: 12px 15px;\r\n    border: 1px solid white;\r\n    border-radius: 25px;\r\n    font-size: 18px;\r\n    transition: all 0.7s ease-in-out;\r\n    margin: 25px 0;\r\n    width: 100%;\r\n    color: black;\r\n  }\r\n\r\n  @media screen and (min-width: 700px) {\r\n    max-width: 400px;\r\n  }\r\n`;\r\n\r\nconst UpdateTitle = styled.h3`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 15px 0;\r\n  font-size: 30px;\r\n  margin: 20px 0;\r\n`;\r\n\r\nconst InputsDiv = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  gap: 1.5rem;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  padding: 12px 10px;\r\n  border-radius: 10px;\r\n  outline: none;\r\n  font-size: 17px;\r\n  border: 1px solid black;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  padding: 12px 15px;\r\n  color: white;\r\n  background: black;\r\n  border: 1px solid white;\r\n  border-radius: 25px;\r\n  font-size: 18px;\r\n  transition: all 0.7s ease-in-out;\r\n  margin: 25px 0;\r\n  width: 100%;\r\n  cursor: pointer;\r\n\r\n  :hover {\r\n    background: transparent;\r\n    color: black;\r\n    border: 1px solid black;\r\n  }\r\n\r\n  .spinner {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n`;\r\n\r\nconst InputPicture = styled.input`\r\n  height: 0.1px;\r\n  opacity: 0;\r\n  overflow: hidden;\r\n  position: absolute;\r\n  z-index: -1;\r\n`;\r\n\r\nconst Label = styled.label`\r\n  font-size: 1.25em;\r\n  font-weight: 500;\r\n  color: black;\r\n  border: 1px solid;\r\n  background-color: transparent;\r\n  padding: 10px 15px;\r\n  display: inline-block;\r\n  cursor: pointer;\r\n  border-radius: 25px;\r\n  transition: all 0.5s ease-in-out;\r\n\r\n  :hover {\r\n    background-color: black;\r\n    color: white;\r\n  }\r\n`;\r\n\r\nconst Span = styled.span`\r\n  color: #cc0000;\r\n  padding-left: 10px;\r\n`;\r\n\r\nconst ImgContainer = styled.div`\r\n  width: 100%;\r\n  margin-top: 15px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  .spinner {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border: 1px solid;\r\n  }\r\n`;\r\nconst UpdateImg = styled.img`\r\n  height: 90px;\r\n  width: 90px;\r\n  object-fit: cover;\r\n  border-radius: 50%;\r\n`;\r\nexport default Profile;\r\n"],"names":["ProfileContainer","styled","VerifyEmail","Details","Header","UserName","Email","Img","UpdateInfo","UpdateTitle","InputsDiv","Input","Button","InputPicture","Label","Span","ImgContainer","UpdateImg","useState","loading","setLoading","username","password","confirmPassword","email","picture","updateInfo","setUpdateInfo","passwordHasError","setPasswordHasError","pictureLoading","setPictureLoading","navigate","useNavigate","user","useContext","CurrentUserContext","useQuery","_id","fetchUserEmail","staleTime","enabled","data","postPictureToCloudinary","type","FormData","append","fetch","process","method","body","postPicture","json","responseJson","secure_url","toString","console","log","stack","handleChange","e","prev","target","name","value","isVerified","src","alt","userDefault","onSubmit","preventDefault","toLowerCase","requestOptions","headers","Authorization","localStorage","getItem","JSON","stringify","UpdateUserInfo","response","parseResponse","setItem","token","error","placeholder","onChange","required","id","className","accept","files","htmlFor","height","width","color","ariaLabel","wrapperClass","visible","disabled"],"sourceRoot":""}