{"version":3,"file":"static/js/487.8f463992.chunk.js","mappings":"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","sources":["components/Item.js","components/chatSystem/Chat.js","components/pages/Renter.js"],"sourcesContent":["import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { scrollToTop } from \"./utils\";\r\n\r\n// Item (single listing) component\r\nconst Item = ({ listing, renters }) => {\r\n  return (\r\n    <ListingWrapper>\r\n      <NavLink\r\n        to={`/listing/${listing._id}`}\r\n        className=\"navLink\"\r\n        onClick={scrollToTop}\r\n      >\r\n        <ListingMain>\r\n          <Img src={listing.imageSrc[0]} alt={listing.name} />\r\n          <Price>${listing.price}/Day</Price>\r\n          <ListingName>{listing.name}</ListingName>\r\n        </ListingMain>\r\n      </NavLink>\r\n      {renters.map((renter) => {\r\n        if (renter._id === listing.renterId) {\r\n          return (\r\n            <NavLink\r\n              to={`/renter/${renter._id}`}\r\n              className=\"navLink\"\r\n              key={renter._id}\r\n            >\r\n              <ListingRenterInfo>\r\n                <img src={renter.picture} alt=\"Renter photo\" />\r\n                <p>{renter.username}</p>\r\n              </ListingRenterInfo>\r\n            </NavLink>\r\n          );\r\n        }\r\n      })}\r\n    </ListingWrapper>\r\n  );\r\n};\r\n\r\n// listing style\r\nconst ListingWrapper = styled.div`\r\n  width: 290px;\r\n  height: 320px;\r\n  border-radius: 25px;\r\n  position: relative;\r\n  box-shadow: rgba(0, 0, 0, 0.16) 0px 1px 4px;\r\n\r\n  .navLink {\r\n    text-decoration: none;\r\n  }\r\n`;\r\n\r\nconst ListingMain = styled.div`\r\n  position: relative;\r\n`;\r\n\r\nconst Img = styled.img`\r\n  width: 100%;\r\n  height: 245px;\r\n  border-radius: 25px 25px 0 0;\r\n`;\r\n\r\nconst Price = styled.div`\r\n  position: absolute;\r\n  top: 0px;\r\n  right: 0px;\r\n  padding: 5px 8px;\r\n  background-color: #fff;\r\n  color: #242526;\r\n  font-weight: 500;\r\n  border-radius: 0 25px 0 25px;\r\n`;\r\n\r\nconst ListingName = styled.div`\r\n  position: absolute;\r\n  bottom: 0;\r\n  left: 0;\r\n  color: #fff;\r\n  font-weight: 500;\r\n  font-size: 18px;\r\n  text-transform: capitalize;\r\n  padding: 0 0 13px 10px;\r\n`;\r\n\r\nconst ListingRenterInfo = styled.div`\r\n  background-color: #fff;\r\n  position: absolute;\r\n  bottom: 0;\r\n  width: 100%;\r\n  height: 24%;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 12px;\r\n  padding-left: 10px;\r\n  border-radius: 0 0 25px 25px;\r\n\r\n  img {\r\n    width: 37px;\r\n    height: 37px;\r\n    border-radius: 50%;\r\n  }\r\n\r\n  p {\r\n    font-weight: 500;\r\n    text-transform: capitalize;\r\n    color: #242526;\r\n    font-size: 17px;\r\n  }\r\n`;\r\nexport default Item;\r\n","import React, { useState, useEffect, useRef, useContext } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport useClickOutside from \"../hooks/useClickOutside\";\r\nimport { BiSend } from \"react-icons/bi\";\r\nimport { ChatContext } from \"../context/ChatContext\";\r\n\r\nconst Chat = ({\r\n  picture,\r\n  renterUsername,\r\n  openChat,\r\n  setOpenChat,\r\n  currentUserName,\r\n  currentUserPicture,\r\n  currentUserId,\r\n  renterId,\r\n}) => {\r\n  const [welcomeMsg, setWelcomeMsg] = useState(\"\");\r\n  const {\r\n    currentChatMembers,\r\n    setCurrentChatMembers,\r\n    message,\r\n    setMessage,\r\n    chatConversation,\r\n    setChatConversation,\r\n    notification,\r\n    setNotification,\r\n    socket,\r\n  } = useContext(ChatContext);\r\n\r\n  // using ref to scroll to bottom inside div messages\r\n  const scrollToBottomRef = useRef();\r\n\r\n  // using useRef to prevent useEffect from running twice as it does in version 18\r\n  // without this method it will create a conversation twice each time\r\n  const effectRanOnce = useRef(false);\r\n\r\n  // create new conversation if we don't find one when user open the chat\r\n  useEffect(() => {\r\n    if (effectRanOnce.current === false) {\r\n      const createNewConversationHandler = async () => {\r\n        const requestOptions = {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({\r\n            senderId: currentUserId,\r\n            receiverId: renterId,\r\n            createAt: Date.now(),\r\n          }),\r\n        };\r\n\r\n        try {\r\n          // post a new conversation between the renter and the current user\r\n          const response = await fetch(\r\n            `${process.env.REACT_APP_BACKEND_URL}/api/conversation`,\r\n            requestOptions\r\n          );\r\n\r\n          // parse the response\r\n          const parseResponse = await response.json();\r\n\r\n          if (parseResponse.status === 201) {\r\n            setCurrentChatMembers(parseResponse.data);\r\n          }\r\n        } catch (error) {\r\n          console.log(error.stack);\r\n        }\r\n      };\r\n      createNewConversationHandler();\r\n\r\n      // cleanup function\r\n      return () => {\r\n        // set the effectRanOnce to true to prevent useEffect from running twice\r\n        effectRanOnce.current = true;\r\n      };\r\n    }\r\n  }, [currentUserId, renterId]);\r\n\r\n  // fetching conversation by user id\r\n  useEffect(() => {\r\n    try {\r\n      // function that handle the fetch from our database\r\n      const fechingConversationHandler = async () => {\r\n        // fetching conversation data by user id\r\n        const fetchConversationByUserId = await fetch(\r\n          `${process.env.REACT_APP_BACKEND_URL}/api/conversation/${currentUserId}`\r\n        );\r\n\r\n        // parse the response\r\n        const responseJson = await fetchConversationByUserId.json();\r\n\r\n        if (responseJson.data.length > 0) {\r\n          const findConversation = responseJson.data.find((conversation) => {\r\n            return (\r\n              (conversation.members[0] === currentUserId &&\r\n                conversation.members[1] === renterId) ||\r\n              (conversation.members[1] === currentUserId &&\r\n                conversation.members[0] === renterId)\r\n            );\r\n          });\r\n\r\n          setCurrentChatMembers(findConversation);\r\n        }\r\n      };\r\n      fechingConversationHandler();\r\n    } catch (error) {\r\n      console.log(error.stack);\r\n    }\r\n  }, []);\r\n\r\n  // first initialisation with the server\r\n  useEffect(() => {\r\n    if (socket) {\r\n      // emiting information details to the server\r\n      socket.emit(\"welcome-message\", { currentUserName, renterUsername });\r\n      socket.emit(\"initialisation-add-user\", currentUserId);\r\n\r\n      // recieving the welcome message from the server and store it in welcome msg state\r\n      socket.on(\"welcome-response\", (message) => {\r\n        setWelcomeMsg(message);\r\n      });\r\n    }\r\n  }, [socket, currentUserName, currentUserId]);\r\n\r\n  // fetch all messages for specific chat\r\n  useEffect(() => {\r\n    // function that handle the fetch of messages\r\n    const chatMessagesHandler = async () => {\r\n      try {\r\n        // fetching messages data by chat id\r\n        const response = await fetch(\r\n          `${process.env.REACT_APP_BACKEND_URL}/api/messages/${currentChatMembers?._id}`\r\n        );\r\n\r\n        // parse the response\r\n        const responseJson = await response.json();\r\n\r\n        if (responseJson.data.length > 0) {\r\n          setChatConversation(responseJson.data);\r\n        }\r\n      } catch (error) {\r\n        console.log(error.stack);\r\n      }\r\n    };\r\n    chatMessagesHandler();\r\n  }, [currentChatMembers]);\r\n\r\n  // receiving new messages from the server\r\n  useEffect(() => {\r\n    if (socket) {\r\n      // getting messege from the server\r\n      socket.on(\"getMessage\", (data) => {\r\n        if (\r\n          currentChatMembers?.members?.includes(data.senderId) === true &&\r\n          currentChatMembers?.members?.includes(data.sendToId) === true\r\n        ) {\r\n          setChatConversation([...chatConversation, data]);\r\n        } else if (!openChat && !notification.includes(data)) {\r\n          setNotification([...notification, data]);\r\n        }\r\n      });\r\n    }\r\n  }, [socket, chatConversation, notification, openChat]);\r\n\r\n  // function that handle the send of messages\r\n  const sendMessageHandler = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const messageinfo = {\r\n      senderId: currentUserId,\r\n      conversationId: currentChatMembers?._id,\r\n      receiverId: renterId,\r\n      text: message,\r\n      createAt: Date.now(),\r\n    };\r\n\r\n    // emit the message to socketio server\r\n    socket.emit(\"sendMessage\", messageinfo);\r\n\r\n    setMessage(\"\");\r\n\r\n    try {\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(messageinfo),\r\n      };\r\n\r\n      // post messages to db\r\n      const response = await fetch(\r\n        `${process.env.REACT_APP_BACKEND_URL}/api/message`,\r\n        requestOptions\r\n      );\r\n\r\n      if (response.ok) {\r\n        setChatConversation([...chatConversation, messageinfo]);\r\n      }\r\n    } catch (error) {\r\n      console.log(error.stack);\r\n    }\r\n  };\r\n\r\n  // custom hook to check and close if we click outside the chat\r\n  let ref = useClickOutside(() => {\r\n    setOpenChat(false);\r\n  });\r\n\r\n  // finction to scroll to bottom when reveiving or sending messages\r\n  useEffect(() => {\r\n    scrollToBottomRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [chatConversation]);\r\n\r\n  return (\r\n    <ChatWrapper ref={ref}>\r\n      {openChat && (\r\n        <ChatWindow>\r\n          <ChatDiv>\r\n            {chatConversation.length === 0 && (\r\n              <WelcomMsgDiv>\r\n                <Img src={picture} alt=\"userProfile\" />\r\n                <WelcomeMsg>{welcomeMsg.text}</WelcomeMsg>\r\n              </WelcomMsgDiv>\r\n            )}\r\n            <MsgDiv>\r\n              {chatConversation.map((msg, index) => {\r\n                return (\r\n                  <MessageWrapper key={index} ref={scrollToBottomRef}>\r\n                    {msg.senderId !== currentUserId &&\r\n                    msg.senderId === renterId ? (\r\n                      <RightMsg>\r\n                        <MsgEl key={index}>{msg.text}</MsgEl>\r\n                        <Img src={picture} alt=\"RenterProfile\" />\r\n                      </RightMsg>\r\n                    ) : (\r\n                      msg.senderId === currentUserId &&\r\n                      msg.receiverId === renterId && (\r\n                        <LeftMsg>\r\n                          <Img src={currentUserPicture} alt=\"userProfile\" />\r\n                          <MsgEl>{msg.text}</MsgEl>\r\n                        </LeftMsg>\r\n                      )\r\n                    )}\r\n                  </MessageWrapper>\r\n                );\r\n              })}\r\n            </MsgDiv>\r\n          </ChatDiv>\r\n          <form onSubmit={sendMessageHandler}>\r\n            <Input\r\n              value={message}\r\n              placeholder=\"Message\"\r\n              onChange={(e) => setMessage(e.target.value)}\r\n              onKeyDown={(e) =>\r\n                e.key === \"Enter\" ? sendMessageHandler(e) : null\r\n              }\r\n            />\r\n            <SendButton type=\"submit\">\r\n              <BiSend className=\"sendIcon\" />\r\n            </SendButton>\r\n          </form>\r\n        </ChatWindow>\r\n      )}\r\n      <Button\r\n        onClick={() => {\r\n          // toggle the open and close of the chat\r\n          setOpenChat(!openChat);\r\n        }}\r\n      >\r\n        <Msg className=\"msg-display\">Hey i'm {renterUsername}!</Msg>\r\n        <img src={picture} alt=\"renter picture\" />\r\n      </Button>\r\n    </ChatWrapper>\r\n  );\r\n};\r\n\r\n// chat style\r\nconst ChatWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-end;\r\n`;\r\nconst ChatWindow = styled.div`\r\n  width: 290px;\r\n  height: 400px;\r\n  border: 1px solid #000;\r\n  background-color: #f5f5f3;\r\n  border-radius: 10px;\r\n  transition: all 0.5s ease;\r\n\r\n  border: 1px solid;\r\n  z-index: 99999;\r\n  position: relative;\r\n`;\r\n\r\nconst ChatDiv = styled.div`\r\n  height: 340px;\r\n  overflow-x: hidden;\r\n  overflow-y: auto;\r\n\r\n  ::-webkit-scrollbar {\r\n    width: 8px;\r\n    height: 8px;\r\n  }\r\n\r\n  ::-webkit-scrollbar-thumb {\r\n    background: white;\r\n    border-radius: 50px;\r\n  }\r\n\r\n  ::-webkit-scrollbar-track {\r\n    background: #f5f0ed;\r\n    border-radius: 50px;\r\n    border-top-right-radius: 25px;\r\n    border-top-left-radius: 25px;\r\n  }\r\n`;\r\nconst MessageWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 9px 10px;\r\n`;\r\n\r\nconst RightMsg = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-end;\r\n  gap: 7px;\r\n  padding-top: 13px;\r\n`;\r\nconst LeftMsg = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 5px;\r\n`;\r\n\r\nconst MsgDiv = styled.div`\r\n  /* max-height: 345px; */\r\n`;\r\nconst MsgEl = styled.div`\r\n  background-color: #fff;\r\n  width: fit-content;\r\n  border-radius: 25px;\r\n  padding: 10px 12px;\r\n  font-size: 15px;\r\n  font-weight: 400;\r\n`;\r\n\r\nconst WelcomMsgDiv = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n  justify-content: center;\r\n  gap: 6px;\r\n  padding-top: 13px;\r\n`;\r\nconst WelcomeMsg = styled.div`\r\n  background-color: #fff;\r\n  width: 80%;\r\n  border-radius: 25px;\r\n  padding: 10px 12px;\r\n  font-size: 15px;\r\n  font-weight: 400;\r\n`;\r\nconst Img = styled.img`\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n`;\r\nconst Input = styled.textarea`\r\n  position: absolute;\r\n  bottom: 7px;\r\n  left: 5px;\r\n  padding-left: 9px;\r\n  padding-top: 10px;\r\n  width: 85%;\r\n  height: 40px;\r\n  outline: none;\r\n  border-radius: 25px;\r\n  border: 1px solid #000;\r\n  background-color: transparent;\r\n`;\r\n\r\nconst SendButton = styled.button`\r\n  position: absolute;\r\n  bottom: 7px;\r\n  right: 5px;\r\n  height: 40px;\r\n  width: 10%;\r\n  border-radius: 50%;\r\n  border: none;\r\n  background-color: transparent;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  transition: all 0.5s ease;\r\n  border: 1px solid;\r\n\r\n  :hover {\r\n    border: none;\r\n    transform: scale(0.9);\r\n  }\r\n\r\n  .sendIcon {\r\n    font-size: 22px;\r\n    color: #242526;\r\n  }\r\n`;\r\nconst Msg = styled.div`\r\n  background: #000;\r\n  color: #f5f0ed;\r\n  padding: 7px 10px;\r\n  border-radius: 25px;\r\n  opacity: 0;\r\n  cursor: pointer;\r\n  transition: all 0.4s ease;\r\n  font-size: 15px;\r\n\r\n  :hover {\r\n    opacity: 1;\r\n  }\r\n`;\r\nconst Button = styled.button`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 9px;\r\n  background-color: transparent;\r\n  border: none;\r\n  border-radius: 50%;\r\n  height: 80px;\r\n  cursor: pointer;\r\n  transition: all 0.33s ease;\r\n\r\n  :hover {\r\n    .msg-display {\r\n      opacity: 1;\r\n    }\r\n  }\r\n\r\n  img {\r\n    width: 60px;\r\n    height: 60px;\r\n    border-radius: 50%;\r\n  }\r\n`;\r\n\r\nexport default Chat;\r\n","import React, { useEffect, useState, useContext } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport styled from \"styled-components\";\r\nimport profilepage from \"../../assets/profilepage.jpg\";\r\nimport Item from \"../Item\";\r\nimport Chat from \"../chatSystem/Chat\";\r\nimport LoadingSpinner from \"../styleComponents/LoadingSpinner\";\r\nimport { ChatContext } from \"../context/ChatContext\";\r\nimport { useUser } from \"../hooks/useUser\";\r\n\r\nconst Renter = () => {\r\n  const { openChat, setOpenChat } = useContext(ChatContext);\r\n\r\n  // get user information from useUser hook\r\n  const user = useUser();\r\n\r\n  const [loading, setLoading] = useState(false);\r\n  const [listings, setListings] = useState();\r\n  const [renter, setRenter] = useState([]);\r\n  const { id } = useParams();\r\n\r\n  // fetching data by renterId\r\n  useEffect(() => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      // fetch all renter listing\r\n      const fechingRenterLisitngHandler = async () => {\r\n        // fetch all renter listing by render id\r\n        const fetchAllRenterListing = await fetch(\r\n          `${process.env.REACT_APP_BACKEND_URL}/api/renter-listing/${id}`\r\n        );\r\n\r\n        // parse the response\r\n        const responseJson = await fetchAllRenterListing.json();\r\n\r\n        // fetch renter informations by renter id\r\n        const fetchRenterInfo = await fetch(\r\n          `${process.env.REACT_APP_BACKEND_URL}/api/user/${id}`\r\n        );\r\n\r\n        // parse the response\r\n        const responseJsonRenter = await fetchRenterInfo.json();\r\n\r\n        if (responseJson.data && responseJsonRenter.data) {\r\n          setListings(responseJson.data);\r\n\r\n          const renterArr = [responseJsonRenter.data];\r\n\r\n          setRenter(renterArr);\r\n\r\n          setLoading(false);\r\n        } else {\r\n          setLoading(false);\r\n        }\r\n      };\r\n\r\n      fechingRenterLisitngHandler();\r\n    } catch (error) {\r\n      console.log(error.stack);\r\n      setLoading(false);\r\n    }\r\n  }, [id]);\r\n\r\n  return (\r\n    <ListingContainer>\r\n      {loading ? (\r\n        <LoadingSpinner />\r\n      ) : (\r\n        <>\r\n          {listings && renter && !loading && (\r\n            <ListingWrapper>\r\n              <Banner>\r\n                <BannerImg src={profilepage} alt=\"banner\" />\r\n                <h2>{renter[0].username}</h2>\r\n              </Banner>\r\n              <Main>\r\n                <LeftSide>\r\n                  <ListingNumber>{listings.length} open listing</ListingNumber>\r\n                  <ListingItem>\r\n                    {listings.map((listing) => {\r\n                      return (\r\n                        <Item\r\n                          listing={listing}\r\n                          renters={renter}\r\n                          key={listing._id}\r\n                        />\r\n                      );\r\n                    })}\r\n                  </ListingItem>\r\n                </LeftSide>\r\n                <RightSide>\r\n                  <ProfileImg src={renter[0].picture} />\r\n                  <Button\r\n                    onClick={() => {\r\n                      if (user) {\r\n                        setOpenChat(true);\r\n                      } else {\r\n                        navigate(\"/login\");\r\n                      }\r\n                    }}\r\n                  >\r\n                    Contact {renter[0].username}\r\n                  </Button>\r\n                </RightSide>\r\n              </Main>\r\n              {user && user?._id !== renter[0]._id && (\r\n                <ChatWrapper>\r\n                  <Chat\r\n                    picture={renter[0].picture}\r\n                    renterUsername={renter[0].username}\r\n                    renterId={renter[0]._id}\r\n                    openChat={openChat}\r\n                    setOpenChat={setOpenChat}\r\n                    currentUserName={user?.username}\r\n                    currentUserPicture={user?.picture}\r\n                    currentUserId={user?._id}\r\n                  />\r\n                </ChatWrapper>\r\n              )}\r\n            </ListingWrapper>\r\n          )}\r\n        </>\r\n      )}\r\n    </ListingContainer>\r\n  );\r\n};\r\n\r\n// renter style\r\nconst ListingContainer = styled.div`\r\n  min-height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding-bottom: 220px;\r\n\r\n  .spinner {\r\n    height: 80vh;\r\n    width: 100%;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n`;\r\n\r\nconst ListingWrapper = styled.div``;\r\n\r\nconst Banner = styled.div`\r\n  height: 160px;\r\n  position: relative;\r\n\r\n  h2 {\r\n    position: absolute;\r\n    top: 50px;\r\n    left: 20px;\r\n    font-size: 35px;\r\n    font-weight: 900;\r\n    text-transform: capitalize;\r\n    color: #242526;\r\n  }\r\n`;\r\n\r\nconst BannerImg = styled.img`\r\n  height: 160px;\r\n  width: 100%;\r\n  object-fit: cover;\r\n  opacity: 0.3;\r\n`;\r\n\r\nconst Main = styled.div`\r\n  display: flex;\r\n  max-width: 1300px;\r\n  margin: 0 auto;\r\n  align-items: flex-start;\r\n\r\n  @media screen and (max-width: 700px) {\r\n    flex-direction: column-reverse;\r\n  }\r\n\r\n  @media screen and (max-width: 1300px) {\r\n    gap: 100px;\r\n  }\r\n`;\r\n\r\nconst ChatWrapper = styled.div`\r\n  position: fixed;\r\n  bottom: 24px;\r\n  right: 24px;\r\n`;\r\n\r\nconst RightSide = styled.div`\r\n  flex: 0.3;\r\n  margin: 50px auto;\r\n  width: 80%;\r\n\r\n  @media screen and (max-width: 700px) {\r\n    width: 70%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n\r\n  @media screen and (min-width: 1300px) {\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n`;\r\n\r\nconst LeftSide = styled.div`\r\n  flex: 0.7;\r\n`;\r\n\r\nconst ListingItem = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n  gap: 15px;\r\n`;\r\n\r\nconst ListingNumber = styled.h2`\r\n  padding: 19px 41px;\r\n\r\n  @media screen and (max-width: 700px) {\r\n    margin-bottom: 15px;\r\n  }\r\n`;\r\n\r\nconst ProfileImg = styled.img`\r\n  width: 70%;\r\n  height: 240px;\r\n  border-radius: 10px;\r\n  margin-bottom: 10px;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  padding: 10px 25px;\r\n  width: 70%;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  background: transparent;\r\n  border-radius: 5px;\r\n  border: 1px solid;\r\n  transition: background 0.5s ease-in-out;\r\n\r\n  :hover {\r\n    background-color: #dadce1;\r\n  }\r\n`;\r\nexport default Renter;\r\n"],"names":["ListingWrapper","styled","ListingMain","Img","Price","ListingName","ListingRenterInfo","listing","renters","to","_id","className","onClick","scrollToTop","src","imageSrc","alt","name","price","map","renter","renterId","picture","username","ChatWrapper","ChatWindow","ChatDiv","MessageWrapper","RightMsg","LeftMsg","MsgDiv","MsgEl","WelcomMsgDiv","WelcomeMsg","Input","SendButton","Msg","Button","renterUsername","openChat","setOpenChat","currentUserName","currentUserPicture","currentUserId","useState","welcomeMsg","setWelcomeMsg","useContext","ChatContext","currentChatMembers","setCurrentChatMembers","message","setMessage","chatConversation","setChatConversation","notification","setNotification","socket","scrollToBottomRef","useRef","effectRanOnce","useEffect","current","createNewConversationHandler","requestOptions","method","headers","body","JSON","stringify","senderId","receiverId","createAt","Date","now","fetch","process","response","json","parseResponse","status","data","console","log","stack","fechingConversationHandler","fetchConversationByUserId","responseJson","length","findConversation","find","conversation","members","error","emit","on","chatMessagesHandler","includes","sendToId","sendMessageHandler","e","preventDefault","messageinfo","conversationId","text","ok","ref","useClickOutside","scrollIntoView","behavior","msg","index","onSubmit","value","placeholder","onChange","target","onKeyDown","key","type","ListingContainer","Banner","BannerImg","Main","RightSide","LeftSide","ListingItem","ListingNumber","ProfileImg","user","useUser","loading","setLoading","listings","setListings","setRenter","id","useParams","fechingRenterLisitngHandler","fetchAllRenterListing","fetchRenterInfo","responseJsonRenter","renterArr","LoadingSpinner","profilepage","Item","navigate","Chat"],"sourceRoot":""}