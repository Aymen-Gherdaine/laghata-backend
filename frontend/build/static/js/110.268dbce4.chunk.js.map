{"version":3,"file":"static/js/110.268dbce4.chunk.js","mappings":"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","sources":["components/chatSystem/Conversation.js","components/chatSystem/AdminPage.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst conversation = ({\r\n  conversation,\r\n  currentUserId,\r\n  setCurrentChatConversation,\r\n  setClientPicture,\r\n  setNotification,\r\n  notification,\r\n}) => {\r\n  const [client, setClient] = useState(null);\r\n\r\n  // fetch client information\r\n  useEffect(() => {\r\n    // find client id inside conversation members\r\n    const clientId = conversation.members.find(\r\n      (member) => member !== currentUserId\r\n    );\r\n\r\n    //function that handle the fetch from our database\r\n    const fechingClientInfoHandler = async () => {\r\n      try {\r\n        if (clientId) {\r\n          // fetching client data by user id\r\n          const fetchClientInfoByUserId = await fetch(\r\n            `${process.env.REACT_APP_BACKEND_URL}/api/user/${clientId}`\r\n          );\r\n\r\n          // parse the response\r\n          const responseJson = await fetchClientInfoByUserId.json();\r\n\r\n          if (responseJson.data) {\r\n            setClient(responseJson.data);\r\n            setClientPicture(responseJson.data.picture);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.log(error.stack);\r\n      }\r\n    };\r\n\r\n    fechingClientInfoHandler();\r\n  }, [currentUserId, conversation]);\r\n\r\n  // calculate how many notification has each user\r\n  let notifCount = 0;\r\n\r\n  if (notification && client) {\r\n    notification.map((notif) => {\r\n      if (notif.senderId === client._id) {\r\n        notifCount += 1;\r\n      }\r\n      return notifCount;\r\n    });\r\n  }\r\n\r\n  // filter notification array after reading the message\r\n  const removeNotificationHandler = () => {\r\n    setNotification(\r\n      notification.filter((notif) => notif.senderId !== client._id)\r\n    );\r\n  };\r\n\r\n  return (\r\n    <UserInfo\r\n      onClick={() => {\r\n        setCurrentChatConversation(conversation);\r\n        removeNotificationHandler();\r\n      }}\r\n      key={conversation._id}\r\n    >\r\n      <ClientPicture src={client?.picture} />\r\n      {notifCount > 0 && <ItemCount>{notifCount}</ItemCount>}\r\n      <UserName>{client?.username}</UserName>\r\n    </UserInfo>\r\n  );\r\n};\r\n\r\n// conversation style\r\nconst UserInfo = styled.div`\r\n  margin: 0px 15px;\r\n  padding: 20px;\r\n  width: fit-content;\r\n  cursor: pointer;\r\n  transition: all 0.5s ease-in-out;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 13px;\r\n  position: relative;\r\n\r\n  :hover {\r\n    background-color: #f5f0ed;\r\n  }\r\n`;\r\n\r\nconst ClientPicture = styled.img`\r\n  width: 50px;\r\n  height: 50px;\r\n  border-radius: 50%;\r\n`;\r\n\r\nconst UserName = styled.p`\r\n  font-weight: 700px;\r\n`;\r\n\r\nconst ItemCount = styled.span`\r\n  width: 19px;\r\n  height: 19px;\r\n  border-radius: 50%;\r\n  background: white;\r\n  color: black;\r\n  position: absolute;\r\n  top: 15px;\r\n\r\n  right: 13px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n`;\r\nexport default conversation;\r\n","import React, { useState, useRef, useEffect, useContext } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport Conversation from \"../chatSystem/Conversation\";\r\nimport { ChatContext } from \"../context/ChatContext\";\r\nimport { CurrentUserContext } from \"../context/CurrentUserContext\";\r\nimport { BiSend } from \"react-icons/bi\";\r\nimport { Circles } from \"react-loader-spinner\";\r\n\r\nconst AdminPage = () => {\r\n  const { socket, setNotification, notification } = useContext(ChatContext);\r\n\r\n  // get user information from current user context hook\r\n  const { user } = useContext(CurrentUserContext);\r\n\r\n  const [chatLoading, setChatLoading] = useState(false);\r\n  const [chatConversation, setChatConversation] = useState([]);\r\n  const [currentChatConversation, setCurrentChatConversation] = useState(null);\r\n  const [messages, setMessages] = useState([]);\r\n  const [newMessage, setNewMessage] = useState(\"\");\r\n  const [comingMessage, setComingMessage] = useState(\"\");\r\n  const [clientPicture, setClientPicture] = useState();\r\n\r\n  // using ref to scroll to bottom inside div messages\r\n  const scrollToBottomRef = useRef();\r\n\r\n  // receiving messages from socket server\r\n  useEffect(() => {\r\n    if (socket) {\r\n      socket?.on(\"getMessage\", (data) => {\r\n        setComingMessage({\r\n          senderId: data.senderId,\r\n          text: data.text,\r\n          createdAt: new Date(Date.now()),\r\n        });\r\n      });\r\n    }\r\n  }, [socket]);\r\n\r\n  // checking if the message that we receive came from a user that is member in this chat\r\n  useEffect(() => {\r\n    comingMessage &&\r\n      currentChatConversation?.members.includes(comingMessage.senderId) &&\r\n      setMessages((prev) => [...prev, comingMessage]);\r\n  }, [comingMessage, currentChatConversation]);\r\n\r\n  // fetching conversation by user id\r\n  useEffect(() => {\r\n    try {\r\n      // function that handle the fetch from our database\r\n      const fechingConversationHandler = async () => {\r\n        // fetching conversation data by user id\r\n        const fetchConversationByUserId = await fetch(\r\n          `${process.env.REACT_APP_BACKEND_URL}/api/conversation/${user?._id}`\r\n        );\r\n\r\n        // parse the response\r\n        const responseJson = await fetchConversationByUserId.json();\r\n\r\n        if (responseJson.data.length > 0) {\r\n          setChatConversation(responseJson.data);\r\n        }\r\n      };\r\n      fechingConversationHandler();\r\n    } catch (error) {\r\n      console.log(error.stack);\r\n    }\r\n  }, [user?._id]);\r\n\r\n  // fetch all messages for specific chat\r\n  useEffect(() => {\r\n    setChatLoading(true);\r\n    // function that handle the fetch of messages\r\n    const chatMessagesHandler = async () => {\r\n      try {\r\n        // fetching messages data by chat id\r\n        const response = await fetch(\r\n          `${process.env.REACT_APP_BACKEND_URL}/api/messages/${currentChatConversation?._id}`\r\n        );\r\n\r\n        // parse the response\r\n        const responseJson = await response.json();\r\n\r\n        if (responseJson.data.length > 0) {\r\n          setMessages(responseJson.data);\r\n          setChatLoading(false);\r\n        }\r\n      } catch (error) {\r\n        console.log(error.stack);\r\n        setChatLoading(false);\r\n      }\r\n      setChatLoading(false);\r\n    };\r\n    chatMessagesHandler();\r\n  }, [currentChatConversation]);\r\n\r\n  // function that handle the send of messages\r\n  const sendMessageHandler = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const receiverId = currentChatConversation.members.find(\r\n      (member) => member !== user?._id\r\n    );\r\n\r\n    const messageinfo = {\r\n      senderId: user?._id,\r\n      text: newMessage,\r\n      receiverId: receiverId,\r\n      conversationId: currentChatConversation._id,\r\n      createAt: new Date(Date.now()),\r\n    };\r\n\r\n    socket.emit(\"sendMessage\", {\r\n      senderId: user?._id,\r\n      receiverId: receiverId,\r\n      text: newMessage,\r\n    });\r\n\r\n    setNewMessage(\"\");\r\n\r\n    try {\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(messageinfo),\r\n      };\r\n\r\n      // post messages to db\r\n      const response = await fetch(\r\n        `${process.env.REACT_APP_BACKEND_URL}/api/message`,\r\n        requestOptions\r\n      );\r\n\r\n      if (response.ok) {\r\n        setMessages([...messages, messageinfo]);\r\n      }\r\n    } catch (error) {\r\n      console.log(error.stack);\r\n    }\r\n  };\r\n\r\n  // finction to scroll to bottom when reveiving or sending messages\r\n  useEffect(() => {\r\n    scrollToBottomRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages]);\r\n\r\n  return (\r\n    <AdminPageWrapper>\r\n      <AdminChatContainer>\r\n        {chatConversation && (\r\n          <>\r\n            <ChatUser>\r\n              {chatConversation.map((conversation) => {\r\n                return (\r\n                  <>\r\n                    <Conversation\r\n                      key={conversation._id}\r\n                      conversation={conversation}\r\n                      currentUserId={user?._id}\r\n                      setCurrentChatConversation={setCurrentChatConversation}\r\n                      setClientPicture={setClientPicture}\r\n                      setNotification={setNotification}\r\n                      notification={notification}\r\n                    />\r\n                  </>\r\n                );\r\n              })}\r\n            </ChatUser>\r\n\r\n            {chatLoading ? (\r\n              <Circles\r\n                height=\"30\"\r\n                width=\"30\"\r\n                color=\"#242526\"\r\n                ariaLabel=\"circles-loading\"\r\n                wrapperClass=\"spinner\"\r\n                visible={true}\r\n              />\r\n            ) : (\r\n              <ChatDiv>\r\n                {currentChatConversation ? (\r\n                  <>\r\n                    <MsgDiv>\r\n                      {messages.map((message) => {\r\n                        return (\r\n                          <MessageWrapper key={message._id}>\r\n                            {message.senderId !== user?._id ? (\r\n                              <RightMsg key={message._id}>\r\n                                <MsgEl>{message.text}</MsgEl>\r\n                                <Img src={clientPicture} alt=\"RenterProfile\" />\r\n                              </RightMsg>\r\n                            ) : (\r\n                              <LeftMsg key={message._id}>\r\n                                <Img src={user?.picture} alt=\"RenterProfile\" />\r\n                                <MsgEl>{message.text}</MsgEl>\r\n                              </LeftMsg>\r\n                            )}\r\n                          </MessageWrapper>\r\n                        );\r\n                      })}\r\n                    </MsgDiv>\r\n\r\n                    <Form onSubmit={sendMessageHandler}>\r\n                      <Input\r\n                        value={newMessage}\r\n                        placeholder=\"Message\"\r\n                        onChange={(e) => setNewMessage(e.target.value)}\r\n                        onKeyDown={(e) =>\r\n                          e.key === \"Enter\" ? sendMessageHandler(e) : null\r\n                        }\r\n                      />\r\n                      <SendButton type=\"submit\">\r\n                        <BiSend className=\"sendIcon\" />\r\n                      </SendButton>\r\n                    </Form>\r\n                  </>\r\n                ) : (\r\n                  <ChatFirstMsg>No chat selected</ChatFirstMsg>\r\n                )}\r\n              </ChatDiv>\r\n            )}\r\n          </>\r\n        )}\r\n      </AdminChatContainer>\r\n    </AdminPageWrapper>\r\n  );\r\n};\r\n\r\n// admin page style\r\nconst AdminPageWrapper = styled.div`\r\n  min-height: 100vh;\r\n  background-color: #f5f0ed;\r\n  position: relative;\r\n`;\r\n\r\nconst AdminChatContainer = styled.div`\r\n  max-width: 950px;\r\n  width: 90%;\r\n  margin: 0 auto;\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n\r\n  .spinner {\r\n    margin-top: 60px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n`;\r\nconst ChatUser = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n  gap: 15px;\r\n`;\r\n\r\nconst ChatFirstMsg = styled.span`\r\n  font-size: 50px;\r\n  width: 100%;\r\n  text-align: center;\r\n  color: #f5f5f3;\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 50%;\r\n  transform: translate(-50%, -50%);\r\n\r\n  @media screen and (max-width: 700px) {\r\n    font-size: 35px;\r\n  }\r\n`;\r\n\r\nconst ChatDiv = styled.div`\r\n  margin: 20px 0;\r\n  padding: 10px;\r\n  height: 70vh;\r\n  background-image: url(\"https://cdn.wallpapersafari.com/19/15/HlpKYq.png\");\r\n  background-size: contain;\r\n  position: relative;\r\n  border-radius: 25px;\r\n\r\n  @media screen and (max-width: 700px) {\r\n    height: 60vh;\r\n  }\r\n`;\r\nconst Form = styled.div``;\r\n\r\nconst MessageWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 9px 10px;\r\n`;\r\n\r\nconst RightMsg = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-end;\r\n  gap: 7px;\r\n  padding-top: 13px;\r\n`;\r\nconst LeftMsg = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 5px;\r\n`;\r\n\r\nconst Img = styled.img`\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n`;\r\n\r\nconst MsgDiv = styled.div`\r\n  overflow-x: hidden;\r\n  overflow-y: scroll;\r\n  height: 90%;\r\n\r\n  ::-webkit-scrollbar {\r\n    width: 8px;\r\n    height: 8px;\r\n  }\r\n\r\n  ::-webkit-scrollbar-thumb {\r\n    background: #f5f0ed;\r\n    border-radius: 50px;\r\n  }\r\n\r\n  ::-webkit-scrollbar-track {\r\n    background: #f5f0ed;\r\n    border-radius: 50px;\r\n  }\r\n\r\n  @media screen and (max-width: 700px) {\r\n    height: 85%;\r\n  }\r\n`;\r\nconst MsgEl = styled.div`\r\n  background-color: #fff;\r\n  width: fit-content;\r\n  border-radius: 25px;\r\n  padding: 10px 12px;\r\n  font-size: 15px;\r\n  font-weight: 400;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  position: absolute;\r\n  bottom: 7px;\r\n  left: 10px;\r\n  padding-left: 9px;\r\n  width: 90%;\r\n  height: 40px;\r\n  outline: none;\r\n  border-radius: 25px;\r\n  border: 1px solid white;\r\n  color: white;\r\n  background-color: transparent;\r\n\r\n  @media screen and (max-width: 700px) {\r\n    width: 80%;\r\n  }\r\n`;\r\n\r\nconst SendButton = styled.button`\r\n  border: 1px solid white;\r\n  .sendIcon {\r\n    font-size: 40px;\r\n    color: #f5f0ed;\r\n    position: absolute;\r\n    bottom: 10px;\r\n    right: 20px;\r\n    border-radius: 50%;\r\n    border: none;\r\n    background-color: transparent;\r\n    cursor: pointer;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n`;\r\n\r\nexport default AdminPage;\r\n"],"names":["UserInfo","styled","ClientPicture","UserName","ItemCount","conversation","currentUserId","setCurrentChatConversation","setClientPicture","setNotification","notification","useState","client","setClient","useEffect","clientId","members","find","member","fechingClientInfoHandler","fetch","process","fetchClientInfoByUserId","json","responseJson","data","picture","console","log","stack","notifCount","map","notif","senderId","_id","onClick","filter","src","username","AdminPageWrapper","AdminChatContainer","ChatUser","ChatFirstMsg","ChatDiv","Form","MessageWrapper","RightMsg","LeftMsg","Img","MsgDiv","MsgEl","Input","SendButton","useContext","ChatContext","socket","user","CurrentUserContext","chatLoading","setChatLoading","chatConversation","setChatConversation","currentChatConversation","messages","setMessages","newMessage","setNewMessage","comingMessage","setComingMessage","clientPicture","scrollToBottomRef","useRef","on","text","createdAt","Date","now","includes","prev","fechingConversationHandler","fetchConversationByUserId","length","error","chatMessagesHandler","response","sendMessageHandler","e","preventDefault","receiverId","messageinfo","conversationId","createAt","emit","requestOptions","method","headers","body","JSON","stringify","ok","current","scrollIntoView","behavior","Conversation","height","width","color","ariaLabel","wrapperClass","visible","message","alt","onSubmit","value","placeholder","onChange","target","onKeyDown","key","type","className"],"sourceRoot":""}