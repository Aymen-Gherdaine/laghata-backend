{"version":3,"file":"static/js/302.eec2a900.chunk.js","mappings":"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","sources":["components/pages/Profile.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Circles } from \"react-loader-spinner\";\r\nimport { useUser } from \"../hooks/useUser\";\r\nimport LoadingSpinner from \"../styleComponents/LoadingSpinner\";\r\n\r\nconst Profile = () => {\r\n  const [email, setEmail] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // state for updating user info\r\n  const [updateInfo, setUpdateInfo] = useState({\r\n    username: \"\",\r\n    password: \"\",\r\n    confirmPassword: \"\",\r\n    email: \"\",\r\n    picture: \"\",\r\n  });\r\n\r\n  const [passwordHasError, setPasswordHasError] = useState(false);\r\n\r\n  const [pictureLoading, setPictureLoading] = useState(false);\r\n\r\n  const navigate = useNavigate();\r\n\r\n  // get user info from useUser hook\r\n  const user = useUser();\r\n\r\n  //fetch user info\r\n  useEffect(() => {\r\n    // function that handle the fetch of user info from our db\r\n    const getUserInfo = async () => {\r\n      setLoading(true);\r\n\r\n      try {\r\n        if (user?._id) {\r\n          const response = await fetch(\r\n            `${process.env.REACT_APP_BACKEND_URL}/api/user/${user?._id}`\r\n          );\r\n\r\n          const responseJson = await response.json();\r\n\r\n          if (responseJson) {\r\n            setEmail(responseJson.data.email);\r\n\r\n            setLoading(false);\r\n          } else {\r\n            setLoading(false);\r\n          }\r\n        }\r\n      } catch (error) {\r\n        console.log(error.stack);\r\n        setLoading(false);\r\n      }\r\n\r\n      setLoading(false);\r\n    };\r\n    getUserInfo();\r\n  }, []);\r\n\r\n  // upload picture to cloudinary\r\n  const postPictureToCloudinary = async (picture) => {\r\n    setPictureLoading(true);\r\n    if (picture.type === \"image/jpeg\" || picture.type === \"image/png\") {\r\n      const data = new FormData();\r\n      data.append(\"file\", picture);\r\n      data.append(\"upload_preset\", \"laghata-app\");\r\n      data.append(\"cloud_name\", \"laghata\");\r\n\r\n      try {\r\n        const postPicture = await fetch(\r\n          `${process.env.REACT_APP_CLOUDINARY_url}`,\r\n          {\r\n            method: \"POST\",\r\n            body: data,\r\n          }\r\n        );\r\n        const responseJson = await postPicture.json();\r\n\r\n        setUpdateInfo({\r\n          ...updateInfo,\r\n          picture: responseJson.secure_url.toString(),\r\n        });\r\n        setPictureLoading(false);\r\n      } catch (error) {\r\n        console.log(error.stack);\r\n        setPictureLoading(false);\r\n      }\r\n    } else {\r\n      setPictureLoading(false);\r\n    }\r\n  };\r\n\r\n  // update user info to the database\r\n  const updateHandler = (e) => {\r\n    e.preventDefault();\r\n    setLoading(true);\r\n\r\n    try {\r\n      if (\r\n        updateInfo.password.toLowerCase() !==\r\n        updateInfo.confirmPassword.toLowerCase()\r\n      ) {\r\n        setPasswordHasError(true);\r\n        setLoading(false);\r\n        return;\r\n      } else {\r\n        const requestOptions = {\r\n          method: \"PATCH\",\r\n          headers: {\r\n            \"Content-Type\": \"application/json\",\r\n            Authorization: `Bearer ${localStorage.getItem(\"token\")}`,\r\n          },\r\n          body: JSON.stringify(updateInfo),\r\n        };\r\n        // function that update user information\r\n        const UpdateUserInfo = async () => {\r\n          if (user?._id) {\r\n            const response = await fetch(\r\n              `${process.env.REACT_APP_BACKEND_URL}/api/user/${user?._id}`,\r\n              requestOptions\r\n            );\r\n\r\n            const parseResponse = await response.json();\r\n\r\n            if (parseResponse) {\r\n              localStorage.setItem(\"token\", parseResponse?.data?.token);\r\n\r\n              setUpdateInfo({\r\n                username: \"\",\r\n                password: \"\",\r\n                confirmPassword: \"\",\r\n                email: \"\",\r\n                picture: \"\",\r\n              });\r\n\r\n              setLoading(false);\r\n              navigate(\"/\");\r\n            }\r\n          }\r\n        };\r\n        UpdateUserInfo();\r\n      }\r\n    } catch (error) {\r\n      console.log(error.stack);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // handle input changes\r\n  const handleChange = (e) => {\r\n    setUpdateInfo((prev) => ({ ...prev, [e.target.name]: e.target.value }));\r\n  };\r\n\r\n  return (\r\n    <ProfileContainer>\r\n      {user?.username && user?.picture && email && !loading ? (\r\n        <Wrapper>\r\n          <Details>\r\n            {!user?.isVerified && (\r\n              <VerifyEmail>\r\n                You need to verify your email before making any changes\r\n              </VerifyEmail>\r\n            )}\r\n            <Header>\r\n              {user.picture && <Img src={user.picture} alt=\"profile\" />}\r\n              <div>\r\n                <UserName>{user?.username}</UserName>\r\n                <Email>{email}</Email>\r\n              </div>\r\n            </Header>\r\n            <UpdateInfo>\r\n              <form onSubmit={updateHandler}>\r\n                <UpdateTitle>Update Info:</UpdateTitle>\r\n\r\n                <InputsDiv>\r\n                  <Input\r\n                    type=\"text\"\r\n                    name=\"username\"\r\n                    placeholder=\"Username\"\r\n                    onChange={handleChange}\r\n                    required\r\n                  />\r\n                  <Input\r\n                    type=\"password\"\r\n                    name=\"password\"\r\n                    placeholder=\"Password\"\r\n                    onChange={handleChange}\r\n                    required\r\n                  />\r\n                  <Input\r\n                    type=\"password\"\r\n                    name=\"confirmPassword\"\r\n                    placeholder=\"Confirm Password\"\r\n                    onChange={handleChange}\r\n                    required\r\n                  />\r\n                  {passwordHasError && (\r\n                    <Span>Please check that your passwords match</Span>\r\n                  )}\r\n                  <Input\r\n                    type=\"email\"\r\n                    name=\"email\"\r\n                    placeholder=\"Email\"\r\n                    onChange={handleChange}\r\n                    required\r\n                  />\r\n                  <InputPicture\r\n                    type=\"file\"\r\n                    name=\"file\"\r\n                    id=\"file\"\r\n                    className=\"inputfile\"\r\n                    accept=\"/image/*\"\r\n                    onChange={(e) => {\r\n                      postPictureToCloudinary(e.target.files[0]);\r\n                    }}\r\n                  />\r\n                  <Label htmlFor=\"file\">Choose a picture</Label>\r\n                </InputsDiv>\r\n                {pictureLoading ? (\r\n                  <Circles\r\n                    height=\"30\"\r\n                    width=\"30\"\r\n                    color=\"#54cbe3\"\r\n                    ariaLabel=\"circles-loading\"\r\n                    wrapperClass=\"spinnerPicture\"\r\n                    visible={true}\r\n                  />\r\n                ) : (\r\n                  updateInfo.picture && (\r\n                    <ImgContainer>\r\n                      <UpdateImg\r\n                        src={updateInfo.picture}\r\n                        alt=\"profile Picture\"\r\n                      />\r\n                    </ImgContainer>\r\n                  )\r\n                )}\r\n                {!user?.isVerified ? (\r\n                  <button disabled={user?.isVerified} className=\"disabledBtn\">\r\n                    Submit\r\n                  </button>\r\n                ) : (\r\n                  <Button type=\"submit\">\r\n                    {loading ? (\r\n                      <Circles\r\n                        height=\"30\"\r\n                        width=\"30\"\r\n                        color=\"#54cbe3\"\r\n                        ariaLabel=\"circles-loading\"\r\n                        wrapperClass=\"spinner\"\r\n                        visible={true}\r\n                      />\r\n                    ) : (\r\n                      \"Submit\"\r\n                    )}\r\n                  </Button>\r\n                )}\r\n              </form>\r\n            </UpdateInfo>\r\n          </Details>\r\n        </Wrapper>\r\n      ) : (\r\n        <>\r\n          <LoadingSpinner />\r\n        </>\r\n      )}\r\n    </ProfileContainer>\r\n  );\r\n};\r\n\r\n// profile page style\r\nconst ProfileContainer = styled.div`\r\n  min-height: 100vh;\r\n  padding-bottom: 150px;\r\n  position: relative;\r\n`;\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n`;\r\n\r\nconst VerifyEmail = styled.div`\r\n  border: 1px solid;\r\n  width: 80%;\r\n  max-width: 900px;\r\n  padding: 10px;\r\n  border-radius: 5px;\r\n  background: #f5f0ed;\r\n  margin-top: 20px;\r\n  font-weight: 500;\r\n`;\r\n\r\nconst Details = styled.div`\r\n  max-width: 900px;\r\n  min-width: 400px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  margin: 0 auto;\r\n  padding: 5px 10px;\r\n`;\r\n\r\nconst Header = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 100%;\r\n  height: 150px;\r\n  gap: 1.5rem;\r\n  margin: 30px 0 40px 50px;\r\n\r\n  @media screen and (max-width: 700px) {\r\n    width: 80%;\r\n    margin: 30px auto;\r\n  }\r\n`;\r\n\r\nconst UserName = styled.h2`\r\n  font-size: 30px;\r\n  font-weight: 500;\r\n  text-transform: capitalize;\r\n`;\r\n\r\nconst Email = styled.p`\r\n  font-size: 20px;\r\n`;\r\n\r\nconst Img = styled.img`\r\n  border-radius: 50%;\r\n  margin-top: 30px;\r\n  width: 190px;\r\n  height: 190px;\r\n  object-fit: cover;\r\n\r\n  @media screen and (max-width: 700px) {\r\n    width: 130px;\r\n    height: 130px;\r\n  }\r\n`;\r\n\r\nconst UpdateInfo = styled.div`\r\n  border-radius: 10px;\r\n  border: 1px solid;\r\n  width: 100%;\r\n  height: fit-content;\r\n  margin-bottom: 15px;\r\n  margin-top: 25px;\r\n  display: flex;\r\n  align-items: center;\r\n  box-shadow: rgba(149, 157, 165, 0.2) 0px 8px 24px;\r\n  flex-direction: column;\r\n  gap: 1.5rem;\r\n\r\n  .spinnerPicture,\r\n  .spinner {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n\r\n  .spinnerPicture {\r\n    margin-top: 20px;\r\n  }\r\n\r\n  .disabledBtn {\r\n    padding: 12px 15px;\r\n    border: 1px solid white;\r\n    border-radius: 25px;\r\n    font-size: 18px;\r\n    transition: all 0.7s ease-in-out;\r\n    margin: 25px 0;\r\n    width: 100%;\r\n    color: black;\r\n  }\r\n\r\n  @media screen and (max-width: 700px) {\r\n    width: 85%;\r\n  }\r\n`;\r\nconst UpdateTitle = styled.h3`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  padding: 15px 0;\r\n  font-size: 30px;\r\n  margin: 20px 0;\r\n`;\r\n\r\nconst InputsDiv = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  gap: 1.5rem;\r\n  width: 350px;\r\n\r\n  @media screen and (max-width: 700px) {\r\n    width: 250px;\r\n  }\r\n`;\r\n\r\nconst Input = styled.input`\r\n  padding: 12px 10px;\r\n  border-radius: 10px;\r\n  outline: none;\r\n  font-size: 17px;\r\n  border: 1px solid black;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  padding: 12px 15px;\r\n  color: white;\r\n  background: black;\r\n  border: 1px solid white;\r\n  border-radius: 25px;\r\n  font-size: 18px;\r\n  transition: all 0.7s ease-in-out;\r\n  margin: 25px 0;\r\n  width: 100%;\r\n  cursor: pointer;\r\n\r\n  :hover {\r\n    background: transparent;\r\n    color: black;\r\n    border: 1px solid black;\r\n  }\r\n\r\n  .spinner {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n`;\r\n\r\nconst InputPicture = styled.input`\r\n  height: 0.1px;\r\n  opacity: 0;\r\n  overflow: hidden;\r\n  position: absolute;\r\n  z-index: -1;\r\n`;\r\n\r\nconst Label = styled.label`\r\n  font-size: 1.25em;\r\n  font-weight: 500;\r\n  color: black;\r\n  border: 1px solid;\r\n  background-color: transparent;\r\n  padding: 10px 15px;\r\n  display: inline-block;\r\n  cursor: pointer;\r\n  border-radius: 25px;\r\n  transition: all 0.5s ease-in-out;\r\n\r\n  :hover {\r\n    background-color: black;\r\n    color: white;\r\n  }\r\n`;\r\n\r\nconst Span = styled.span`\r\n  color: #cc0000;\r\n  padding-left: 10px;\r\n`;\r\n\r\nconst ImgContainer = styled.div`\r\n  width: 100%;\r\n  margin-top: 15px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n\r\n  .spinner {\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    border: 1px solid;\r\n  }\r\n`;\r\nconst UpdateImg = styled.img`\r\n  height: 90px;\r\n  width: 90px;\r\n  object-fit: cover;\r\n  border-radius: 50%;\r\n`;\r\nexport default Profile;\r\n"],"names":["ProfileContainer","styled","Wrapper","VerifyEmail","Details","Header","UserName","Email","Img","UpdateInfo","UpdateTitle","InputsDiv","Input","Button","InputPicture","Label","Span","ImgContainer","UpdateImg","useState","email","setEmail","loading","setLoading","username","password","confirmPassword","picture","updateInfo","setUpdateInfo","passwordHasError","setPasswordHasError","pictureLoading","setPictureLoading","navigate","useNavigate","user","useUser","useEffect","getUserInfo","_id","fetch","process","response","json","responseJson","data","console","log","stack","postPictureToCloudinary","type","FormData","append","method","body","postPicture","secure_url","toString","handleChange","e","prev","target","name","value","isVerified","src","alt","onSubmit","preventDefault","toLowerCase","requestOptions","headers","Authorization","localStorage","getItem","JSON","stringify","UpdateUserInfo","parseResponse","setItem","token","error","placeholder","onChange","required","id","className","accept","files","htmlFor","height","width","color","ariaLabel","wrapperClass","visible","disabled"],"sourceRoot":""}