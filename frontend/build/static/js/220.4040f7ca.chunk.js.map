{"version":3,"file":"static/js/220.4040f7ca.chunk.js","mappings":"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","sources":["components/chatSystem/Chat.js","components/styleComponents/ImageSlider.js","components/styleComponents/Calendar.js","components/Reviews/Review.js","components/Reviews/ReviewForm.js","components/Reviews/Reviews.js","pages/Listing.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useContext } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport useClickOutside from \"../hooks/useClickOutside\";\r\nimport { BiSend } from \"react-icons/bi\";\r\nimport { ChatContext } from \"../context/ChatContext\";\r\n\r\nconst Chat = ({\r\n  picture,\r\n  renterUsername,\r\n  openChat,\r\n  setOpenChat,\r\n  currentUserName,\r\n  currentUserPicture,\r\n  currentUserId,\r\n  renterId,\r\n}) => {\r\n  const [welcomeMsg, setWelcomeMsg] = useState(\"\");\r\n  const {\r\n    currentChatMembers,\r\n    setCurrentChatMembers,\r\n    message,\r\n    setMessage,\r\n    chatConversation,\r\n    setChatConversation,\r\n    notification,\r\n    setNotification,\r\n    socket,\r\n  } = useContext(ChatContext);\r\n\r\n  // using ref to scroll to bottom inside div messages\r\n  const scrollToBottomRef = useRef();\r\n\r\n  // using useRef to prevent useEffect from running twice as it does in version 18\r\n  // without this method it will create a conversation twice each time\r\n  const effectRanOnce = useRef(false);\r\n\r\n  // create new conversation if we don't find one when user open the chat\r\n  useEffect(() => {\r\n    if (effectRanOnce.current === false) {\r\n      const createNewConversationHandler = async () => {\r\n        const requestOptions = {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({\r\n            senderId: currentUserId,\r\n            receiverId: renterId,\r\n            createAt: Date.now(),\r\n          }),\r\n        };\r\n\r\n        try {\r\n          // post a new conversation between the renter and the current user\r\n          const response = await fetch(\r\n            `${process.env.REACT_APP_BACKEND_URL}/api/conversation`,\r\n            requestOptions\r\n          );\r\n\r\n          // parse the response\r\n          const parseResponse = await response.json();\r\n\r\n          if (parseResponse.status === 201) {\r\n            setCurrentChatMembers(parseResponse.data);\r\n          }\r\n        } catch (error) {\r\n          console.log(error.stack);\r\n        }\r\n      };\r\n      createNewConversationHandler();\r\n\r\n      // cleanup function\r\n      return () => {\r\n        // set the effectRanOnce to true to prevent useEffect from running twice\r\n        effectRanOnce.current = true;\r\n      };\r\n    }\r\n  }, [currentUserId, renterId]);\r\n\r\n  // fetching conversation by user id\r\n  useEffect(() => {\r\n    try {\r\n      // function that handle the fetch from our database\r\n      const fechingConversationHandler = async () => {\r\n        // fetching conversation data by user id\r\n        const fetchConversationByUserId = await fetch(\r\n          `${process.env.REACT_APP_BACKEND_URL}/api/conversation/${currentUserId}`\r\n        );\r\n\r\n        // parse the response\r\n        const responseJson = await fetchConversationByUserId.json();\r\n\r\n        if (responseJson.data.length > 0) {\r\n          const findConversation = responseJson.data.find((conversation) => {\r\n            return (\r\n              (conversation.members[0] === currentUserId &&\r\n                conversation.members[1] === renterId) ||\r\n              (conversation.members[1] === currentUserId &&\r\n                conversation.members[0] === renterId)\r\n            );\r\n          });\r\n\r\n          setCurrentChatMembers(findConversation);\r\n        }\r\n      };\r\n      fechingConversationHandler();\r\n    } catch (error) {\r\n      console.log(error.stack);\r\n    }\r\n  }, []);\r\n\r\n  // first initialisation with the server\r\n  useEffect(() => {\r\n    if (socket) {\r\n      // emiting information details to the server\r\n      socket.emit(\"welcome-message\", { currentUserName, renterUsername });\r\n      socket.emit(\"initialisation-add-user\", currentUserId);\r\n\r\n      // recieving the welcome message from the server and store it in welcome msg state\r\n      socket.on(\"welcome-response\", (message) => {\r\n        setWelcomeMsg(message);\r\n      });\r\n    }\r\n  }, [socket, currentUserName, currentUserId]);\r\n\r\n  // fetch all messages for specific chat\r\n  useEffect(() => {\r\n    // function that handle the fetch of messages\r\n    const chatMessagesHandler = async () => {\r\n      try {\r\n        // fetching messages data by chat id\r\n        const response = await fetch(\r\n          `${process.env.REACT_APP_BACKEND_URL}/api/messages/${currentChatMembers?._id}`\r\n        );\r\n\r\n        // parse the response\r\n        const responseJson = await response.json();\r\n\r\n        if (responseJson.data.length > 0) {\r\n          setChatConversation(responseJson.data);\r\n        }\r\n      } catch (error) {\r\n        console.log(error.stack);\r\n      }\r\n    };\r\n    chatMessagesHandler();\r\n  }, [currentChatMembers]);\r\n\r\n  // receiving new messages from the server\r\n  useEffect(() => {\r\n    if (socket) {\r\n      // getting messege from the server\r\n      socket.on(\"getMessage\", (data) => {\r\n        if (\r\n          currentChatMembers?.members?.includes(data.senderId) === true &&\r\n          currentChatMembers?.members?.includes(data.sendToId) === true\r\n        ) {\r\n          setChatConversation([...chatConversation, data]);\r\n        } else if (!openChat && !notification.includes(data)) {\r\n          setNotification([...notification, data]);\r\n        }\r\n      });\r\n    }\r\n  }, [socket, chatConversation, notification, openChat]);\r\n\r\n  // function that handle the send of messages\r\n  const sendMessageHandler = async (e) => {\r\n    e.preventDefault();\r\n\r\n    const messageinfo = {\r\n      senderId: currentUserId,\r\n      conversationId: currentChatMembers?._id,\r\n      receiverId: renterId,\r\n      text: message,\r\n      createAt: Date.now(),\r\n    };\r\n\r\n    // emit the message to socketio server\r\n    socket.emit(\"sendMessage\", messageinfo);\r\n\r\n    setMessage(\"\");\r\n\r\n    try {\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(messageinfo),\r\n      };\r\n\r\n      // post messages to db\r\n      const response = await fetch(\r\n        `${process.env.REACT_APP_BACKEND_URL}/api/message`,\r\n        requestOptions\r\n      );\r\n\r\n      if (response.ok) {\r\n        setChatConversation([...chatConversation, messageinfo]);\r\n      }\r\n    } catch (error) {\r\n      console.log(error.stack);\r\n    }\r\n  };\r\n\r\n  // custom hook to check and close if we click outside the chat\r\n  let ref = useClickOutside(() => {\r\n    setOpenChat(false);\r\n  });\r\n\r\n  // finction to scroll to bottom when reveiving or sending messages\r\n  useEffect(() => {\r\n    scrollToBottomRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [chatConversation]);\r\n\r\n  return (\r\n    <ChatWrapper ref={ref}>\r\n      {openChat && (\r\n        <ChatWindow>\r\n          <ChatDiv>\r\n            {chatConversation.length === 0 && (\r\n              <WelcomMsgDiv>\r\n                <Img src={picture} alt=\"userProfile\" />\r\n                <WelcomeMsg>{welcomeMsg.text}</WelcomeMsg>\r\n              </WelcomMsgDiv>\r\n            )}\r\n            <MsgDiv>\r\n              {chatConversation.map((msg, index) => {\r\n                return (\r\n                  <MessageWrapper key={index} ref={scrollToBottomRef}>\r\n                    {msg.senderId !== currentUserId &&\r\n                    msg.senderId === renterId ? (\r\n                      <RightMsg>\r\n                        <MsgEl key={index}>{msg.text}</MsgEl>\r\n                        <Img src={picture} alt=\"RenterProfile\" />\r\n                      </RightMsg>\r\n                    ) : (\r\n                      msg.senderId === currentUserId &&\r\n                      msg.receiverId === renterId && (\r\n                        <LeftMsg>\r\n                          <Img src={currentUserPicture} alt=\"userProfile\" />\r\n                          <MsgEl>{msg.text}</MsgEl>\r\n                        </LeftMsg>\r\n                      )\r\n                    )}\r\n                  </MessageWrapper>\r\n                );\r\n              })}\r\n            </MsgDiv>\r\n          </ChatDiv>\r\n          <form onSubmit={sendMessageHandler}>\r\n            <Input\r\n              value={message}\r\n              placeholder=\"Message\"\r\n              onChange={(e) => setMessage(e.target.value)}\r\n              onKeyDown={(e) =>\r\n                e.key === \"Enter\" ? sendMessageHandler(e) : null\r\n              }\r\n            />\r\n            <SendButton type=\"submit\">\r\n              <BiSend className=\"sendIcon\" />\r\n            </SendButton>\r\n          </form>\r\n        </ChatWindow>\r\n      )}\r\n      <Button\r\n        onClick={() => {\r\n          // toggle the open and close of the chat\r\n          setOpenChat(!openChat);\r\n        }}\r\n      >\r\n        <Msg className=\"msg-display\">Hey i'm {renterUsername}!</Msg>\r\n        <img src={picture} alt=\"renter picture\" />\r\n      </Button>\r\n    </ChatWrapper>\r\n  );\r\n};\r\n\r\n// chat style\r\nconst ChatWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: flex-end;\r\n`;\r\nconst ChatWindow = styled.div`\r\n  width: 290px;\r\n  height: 400px;\r\n  border: 1px solid #000;\r\n  background-color: #f5f5f3;\r\n  border-radius: 10px;\r\n  transition: all 0.5s ease;\r\n\r\n  border: 1px solid;\r\n  z-index: 99999;\r\n  position: relative;\r\n`;\r\n\r\nconst ChatDiv = styled.div`\r\n  height: 340px;\r\n  overflow-x: hidden;\r\n  overflow-y: auto;\r\n\r\n  ::-webkit-scrollbar {\r\n    width: 8px;\r\n    height: 8px;\r\n  }\r\n\r\n  ::-webkit-scrollbar-thumb {\r\n    background: white;\r\n    border-radius: 50px;\r\n  }\r\n\r\n  ::-webkit-scrollbar-track {\r\n    background: #f5f0ed;\r\n    border-radius: 50px;\r\n    border-top-right-radius: 25px;\r\n    border-top-left-radius: 25px;\r\n  }\r\n`;\r\nconst MessageWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding: 9px 10px;\r\n`;\r\n\r\nconst RightMsg = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: flex-end;\r\n  gap: 7px;\r\n  padding-top: 13px;\r\n`;\r\nconst LeftMsg = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 5px;\r\n`;\r\n\r\nconst MsgDiv = styled.div`\r\n  /* max-height: 345px; */\r\n`;\r\nconst MsgEl = styled.div`\r\n  background-color: #fff;\r\n  width: fit-content;\r\n  border-radius: 25px;\r\n  padding: 10px 12px;\r\n  font-size: 15px;\r\n  font-weight: 400;\r\n`;\r\n\r\nconst WelcomMsgDiv = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n  justify-content: center;\r\n  gap: 6px;\r\n  padding-top: 13px;\r\n`;\r\nconst WelcomeMsg = styled.div`\r\n  background-color: #fff;\r\n  width: 80%;\r\n  border-radius: 25px;\r\n  padding: 10px 12px;\r\n  font-size: 15px;\r\n  font-weight: 400;\r\n`;\r\nconst Img = styled.img`\r\n  width: 40px;\r\n  height: 40px;\r\n  border-radius: 50%;\r\n`;\r\nconst Input = styled.textarea`\r\n  position: absolute;\r\n  bottom: 7px;\r\n  left: 5px;\r\n  padding-left: 9px;\r\n  padding-top: 10px;\r\n  width: 85%;\r\n  height: 40px;\r\n  outline: none;\r\n  border-radius: 25px;\r\n  border: 1px solid #000;\r\n  background-color: transparent;\r\n`;\r\n\r\nconst SendButton = styled.button`\r\n  position: absolute;\r\n  bottom: 7px;\r\n  right: 5px;\r\n  height: 40px;\r\n  width: 10%;\r\n  border-radius: 50%;\r\n  border: none;\r\n  background-color: transparent;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  transition: all 0.5s ease;\r\n  border: 1px solid;\r\n\r\n  :hover {\r\n    border: none;\r\n    transform: scale(0.9);\r\n  }\r\n\r\n  .sendIcon {\r\n    font-size: 22px;\r\n    color: #242526;\r\n  }\r\n`;\r\nconst Msg = styled.div`\r\n  background: #000;\r\n  color: #f5f0ed;\r\n  padding: 7px 10px;\r\n  border-radius: 25px;\r\n  opacity: 0;\r\n  cursor: pointer;\r\n  transition: all 0.4s ease;\r\n  font-size: 15px;\r\n\r\n  :hover {\r\n    opacity: 1;\r\n  }\r\n`;\r\nconst Button = styled.button`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  gap: 9px;\r\n  background-color: transparent;\r\n  border: none;\r\n  border-radius: 50%;\r\n  height: 80px;\r\n  cursor: pointer;\r\n  transition: all 0.33s ease;\r\n\r\n  :hover {\r\n    .msg-display {\r\n      opacity: 1;\r\n    }\r\n  }\r\n\r\n  img {\r\n    width: 60px;\r\n    height: 60px;\r\n    border-radius: 50%;\r\n  }\r\n`;\r\n\r\nexport default Chat;\r\n","import { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { IoIosArrowForward, IoIosArrowBack } from \"react-icons/io\";\r\n\r\n// Image slider componenent\r\nconst ImageSlider = ({ slides }) => {\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n\r\n  // function that handle slide to the previous image\r\n  const goToPreviousHandler = () => {\r\n    if (currentIndex === 0) {\r\n      setCurrentIndex(slides.length - 1);\r\n    } else {\r\n      setCurrentIndex(currentIndex - 1);\r\n    }\r\n  };\r\n\r\n  // function that handle slide to the next image\r\n  const goToNextHandler = () => {\r\n    if (currentIndex === slides.length - 1) {\r\n      setCurrentIndex(0);\r\n    } else {\r\n      setCurrentIndex(currentIndex + 1);\r\n    }\r\n  };\r\n\r\n  // function that handle the slider dots to be able to go to the specific slide\r\n  const goToSlide = (slideIndex) => {\r\n    setCurrentIndex(slideIndex);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <SliderStyles>\r\n        <LeftArrowStyles onClick={goToPreviousHandler}>\r\n          <IoIosArrowBack />\r\n        </LeftArrowStyles>\r\n        <RightArrowStyles onClick={goToNextHandler}>\r\n          <IoIosArrowForward />\r\n        </RightArrowStyles>\r\n        <SlideStyle\r\n          style={{ backgroundImage: `url(${slides[currentIndex]})` }}\r\n        ></SlideStyle>\r\n        <DotContainer>\r\n          {slides.map((slide, slideIndex) => {\r\n            return (\r\n              <Dot key={slideIndex} onClick={() => goToSlide(slideIndex)}>\r\n                ◦\r\n              </Dot>\r\n            );\r\n          })}\r\n        </DotContainer>\r\n      </SliderStyles>\r\n    </>\r\n  );\r\n};\r\n\r\n// image slider style\r\nconst SliderStyles = styled.div`\r\n  height: 100%;\r\n  position: relative;\r\n`;\r\n\r\nconst SlideStyle = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  border-radius: 25px;\r\n  background-position: center;\r\n  background-size: cover;\r\n`;\r\n\r\nconst LeftArrowStyles = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  transform: translate(0, -50%);\r\n  left: 17px;\r\n  font-size: 45px;\r\n  color: #fff;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst RightArrowStyles = styled.div`\r\n  position: absolute;\r\n  top: 50%;\r\n  transform: translate(0, -50%);\r\n  right: 17px;\r\n  font-size: 45px;\r\n  color: #fff;\r\n  cursor: pointer;\r\n`;\r\n\r\nconst DotContainer = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  position: absolute;\r\n  top: 99%;\r\n  left: 50%;\r\n  transform: translate(-50%, -99%);\r\n`;\r\n\r\nconst Dot = styled.div`\r\n  margin: 0 7px;\r\n  cursor: pointer;\r\n  font-size: 50px;\r\n  color: #f5f0ed;\r\n`;\r\nexport default ImageSlider;\r\n","import React, { useState, useContext } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { DateRange } from \"react-date-range\";\r\nimport format from \"date-fns/format\";\r\nimport { getDatesInRange } from \"../../utils/utils\";\r\nimport useClickOutside from \"../hooks/useClickOutside\";\r\n\r\nimport \"react-date-range/dist/styles.css\";\r\nimport \"react-date-range/dist/theme/default.css\";\r\n\r\nimport { BookingContext } from \"../context/BookingContext\";\r\n\r\nconst Calendar = ({ reservations }) => {\r\n  const { dateRange, setDateRange } = useContext(BookingContext);\r\n\r\n  // open and close the calander\r\n  const [open, setOpen] = useState(false);\r\n\r\n  // custom hook to check and close if we click outside the calender\r\n  let ref = useClickOutside(() => {\r\n    setOpen(false);\r\n  });\r\n\r\n  // looping over the reservations array to get all days to disable\r\n  const allDisabledDates = reservations\r\n    .map((reservation) => {\r\n      const d1 = reservation.bookingDate[0].startDate.slice(0, 10);\r\n      const d2 = reservation.bookingDate[0].endDate.slice(0, 10);\r\n\r\n      const startDate = new Date(d1);\r\n      const endDate = new Date(d2);\r\n\r\n      let dates = getDatesInRange(startDate, endDate);\r\n\r\n      return dates;\r\n    })\r\n    .flat(1);\r\n\r\n  return (\r\n    <div>\r\n      <Input\r\n        value={`${format(dateRange[0].startDate, \"MM/dd/yyyy\")} to ${format(\r\n          dateRange[0].endDate,\r\n          \"MM/dd/yyyy\"\r\n        )}`}\r\n        readOnly\r\n        onClick={() => setOpen(!open)}\r\n      />\r\n\r\n      <CalenderWrapper ref={ref}>\r\n        {open && (\r\n          <DateRange\r\n            onChange={(date) => setDateRange([date.selection])}\r\n            ranges={dateRange}\r\n            editableDateInputs={true}\r\n            moveRangeOnFirstSelection={false}\r\n            months={1}\r\n            minDate={new Date()}\r\n            disabledDates={[...allDisabledDates]}\r\n            direction=\"horizontal\"\r\n            className=\"calender\"\r\n          />\r\n        )}\r\n      </CalenderWrapper>\r\n    </div>\r\n  );\r\n};\r\n\r\n// Calander style\r\nconst Input = styled.input`\r\n  padding: 7px;\r\n  width: 90%;\r\n  font-size: 17px;\r\n  border-radius: 5px;\r\n  border: 1px solid;\r\n  outline: none;\r\n  color: #242526;\r\n`;\r\n\r\nconst CalenderWrapper = styled.div`\r\n  .calender {\r\n    width: 90%;\r\n  }\r\n`;\r\nexport default Calendar;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { FaStar } from \"react-icons/fa\";\r\n\r\nconst Review = ({ review }) => {\r\n  // create an array of star depending on how many star review we have\r\n  const stars = Array(Number(review.rating)).fill(0);\r\n\r\n  return (\r\n    <ReviewContainer>\r\n      <Top>\r\n        <UserPicture>\r\n          <img src={review.clientPicture} alt=\"user Profile\" />\r\n        </UserPicture>\r\n        <ReviewInfo>\r\n          <ReviewInfoTop>\r\n            <h4>{review.clientUsername}</h4>\r\n            <p>{review.createdAt.slice(4, 15)}</p>\r\n          </ReviewInfoTop>\r\n\r\n          <ReviewStars>\r\n            {stars.map((_, index) => {\r\n              return <FaStar key={index} />;\r\n            })}\r\n          </ReviewStars>\r\n        </ReviewInfo>\r\n      </Top>\r\n      <ReviewSection>\r\n        <div>{review.review}</div>\r\n      </ReviewSection>\r\n    </ReviewContainer>\r\n  );\r\n};\r\n\r\n// review style\r\nconst ReviewContainer = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  border-top: 1px solid #242526;\r\n  padding-top: 12px;\r\n  margin: 10px 0 25px 0;\r\n`;\r\nconst Top = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n  gap: 7px;\r\n  padding-bottom: 12px;\r\n`;\r\nconst UserPicture = styled.div`\r\n  img {\r\n    width: 70px;\r\n    height: 70px;\r\n    border-radius: 50%;\r\n  }\r\n`;\r\nconst ReviewInfo = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 5px;\r\n`;\r\n\r\nconst ReviewStars = styled.div`\r\n  display: flex;\r\n  gap: 2px;\r\n`;\r\nconst ReviewInfoTop = styled.div`\r\n  display: flex;\r\n  gap: 8px;\r\n  align-items: center;\r\n\r\n  p {\r\n    font-size: 13px;\r\n  }\r\n`;\r\nconst ReviewSection = styled.div``;\r\nexport default Review;\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { FaStar } from \"react-icons/fa\";\r\nimport { Circles } from \"react-loader-spinner\";\r\n\r\nconst ReviewForm = ({\r\n  setReviews,\r\n  currentUserId,\r\n  listingId,\r\n  reviews,\r\n  user,\r\n}) => {\r\n  const [starHoverValue, setStarHoverValue] = useState(undefined);\r\n\r\n  const [userReview, setUserReview] = useState({\r\n    review: \"\",\r\n    clientUsername: user?.username,\r\n    clientId: currentUserId,\r\n    clientPicture: user?.picture,\r\n    listingId: listingId,\r\n    rating: 0,\r\n    createdAt: new Date(Date.now()).toString(),\r\n  });\r\n\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // function that handle the update of state and sending the data to our db\r\n  const createReviewHandler = async (e) => {\r\n    e.preventDefault();\r\n\r\n    try {\r\n      setLoading(true);\r\n      // add the new review to our reviews state\r\n      setReviews([userReview, ...reviews]);\r\n\r\n      setUserReview((prev) => ({ ...prev, review: \"\", rating: 0 }));\r\n\r\n      // POST info to server\r\n      const requestOptions = {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(userReview),\r\n      };\r\n\r\n      // send the new review to our db\r\n      const sendNewReview = fetch(\r\n        `${process.env.REACT_APP_BACKEND_URL}/api/add-review`,\r\n        requestOptions\r\n      );\r\n\r\n      if (sendNewReview.ok) {\r\n        setLoading(false);\r\n      } else {\r\n        setLoading(false);\r\n      }\r\n    } catch (error) {\r\n      console.log(error.stack);\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form onSubmit={createReviewHandler}>\r\n      <ReviewStars>\r\n        {Array(5)\r\n          .fill(0)\r\n          .map((_, index) => {\r\n            return (\r\n              <FaStar\r\n                key={index}\r\n                style={{\r\n                  cursor: \"pointer\",\r\n                }}\r\n                color={\r\n                  (starHoverValue || userReview.rating) > index\r\n                    ? \"#000\"\r\n                    : \"grey\"\r\n                }\r\n                value={userReview.rating}\r\n                name=\"rating\"\r\n                onClick={(e) =>\r\n                  setUserReview((prev) => ({\r\n                    ...prev,\r\n                    rating: index + 1,\r\n                  }))\r\n                }\r\n                onMouseOver={() => setStarHoverValue(index + 1)}\r\n                onMouseLeave={() => setStarHoverValue(undefined)}\r\n              />\r\n            );\r\n          })}\r\n      </ReviewStars>\r\n      <TextArea\r\n        value={userReview.review}\r\n        name=\"review\"\r\n        placeholder=\"Write your review here!\"\r\n        onChange={(e) =>\r\n          setUserReview((prev) => ({\r\n            ...prev,\r\n            [e.target.name]: e.target.value,\r\n          }))\r\n        }\r\n      />\r\n      <Button\r\n        type=\"submit\"\r\n        disabled={userReview.rating === 0 && userReview.review.trim() === \"\"}\r\n      >\r\n        {loading ? (\r\n          <Circles\r\n            height=\"30\"\r\n            width=\"30\"\r\n            color=\"#000\"\r\n            ariaLabel=\"circles-loading\"\r\n            wrapperClass=\"spinner\"\r\n            visible={true}\r\n          />\r\n        ) : (\r\n          \"Send Review\"\r\n        )}\r\n      </Button>\r\n    </Form>\r\n  );\r\n};\r\n\r\n// form style\r\nconst Form = styled.form`\r\n  margin: 20px 0;\r\n`;\r\n\r\nconst TextArea = styled.textarea`\r\n  margin: 15px 0;\r\n  min-width: 100%;\r\n  max-width: 100%;\r\n  border-radius: 5px;\r\n  outline: none;\r\n  height: 70px;\r\n  padding: 9px;\r\n  font-size: 16px;\r\n`;\r\n\r\nconst ReviewStars = styled.div`\r\n  padding-left: 2px;\r\n  display: flex;\r\n  gap: 5px;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  padding: 10px 25px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  background: transparent;\r\n  border: 1px solid;\r\n  border-radius: 5px;\r\n  transition: background 0.5s ease-in-out;\r\n\r\n  :hover {\r\n    background-color: #dadce1;\r\n  }\r\n`;\r\nexport default ReviewForm;\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport Review from \"./Review\";\r\nimport ReviewForm from \"./ReviewForm\";\r\nimport { CurrentUserContext } from \"../context/CurrentUserContext\";\r\n\r\nconst Reviews = ({ currentUserId, listingId, reviewsIds }) => {\r\n  // get user information from current user context hook\r\n  const { user } = useContext(CurrentUserContext);\r\n\r\n  // state to store all comment or reviews that we get from backend\r\n  const [reviews, setReviews] = useState([]);\r\n\r\n  // fetch the reviews on mount\r\n  useEffect(() => {\r\n    try {\r\n      // finction that handle the fetch of all reviews for this listing form our db\r\n      const getAllReviewsHandler = async () => {\r\n        // we check if there are reviews in this listing\r\n        if (reviewsIds.length > 0) {\r\n          // fetching all reviews form our db\r\n          const AllReviews = await fetch(\r\n            `${process.env.REACT_APP_BACKEND_URL}/api/reviews/listing/${listingId}`\r\n          );\r\n\r\n          if (AllReviews.ok) {\r\n            // parse the response data\r\n            const parsedAllReviews = await AllReviews.json();\r\n\r\n            if (parsedAllReviews.data.length > 0) {\r\n              // set the reviews state to the data received\r\n              setReviews(parsedAllReviews.data);\r\n            }\r\n          }\r\n        }\r\n      };\r\n      getAllReviewsHandler();\r\n    } catch (error) {\r\n      console.log(error.stack);\r\n    }\r\n  }, [listingId]);\r\n\r\n  return (\r\n    <>\r\n      <h2>Reviews</h2>\r\n      {user && (\r\n        <>\r\n          <h4>Your Review Is Important For Us</h4>\r\n          <ReviewForm\r\n            setReviews={setReviews}\r\n            reviews={reviews}\r\n            currentUserId={currentUserId}\r\n            listingId={listingId}\r\n            user={user}\r\n          />\r\n        </>\r\n      )}\r\n\r\n      <div>\r\n        {reviews &&\r\n          reviews.map((review) => {\r\n            return <Review key={review._id} review={review} />;\r\n          })}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Reviews;\r\n","import React, { useContext } from \"react\";\r\nimport { useParams, useNavigate, NavLink } from \"react-router-dom\";\r\nimport { useQuery, useQueryClient } from \"react-query\";\r\nimport styled from \"styled-components\";\r\nimport ImageSlider from \"../components/styleComponents/ImageSlider\";\r\nimport beachsurf from \"../assets/beachsurf.jpg\";\r\nimport cyclists from \"../assets/cyclists.jpg\";\r\nimport snow1 from \"../assets/snow1.jpg\";\r\nimport surf1 from \"../assets/surf1.jpg\";\r\nimport Calendar from \"../components/styleComponents/Calendar\";\r\nimport { scrollToTop } from \"../utils/utils\";\r\nimport Chat from \"../components/chatSystem/Chat\";\r\nimport Reviews from \"../components/Reviews/Reviews\";\r\nimport { ChatContext } from \"../components/context/ChatContext\";\r\nimport { CurrentUserContext } from \"../components/context/CurrentUserContext\";\r\nimport {\r\n  fetchListingById,\r\n  fetchRenter,\r\n  fetchReservations,\r\n} from \"../utils/apiFetchFunctions\";\r\nimport { Circles } from \"react-loader-spinner\";\r\n\r\nconst Listing = () => {\r\n  // getting information from our chat context\r\n  const { openChat, setOpenChat } = useContext(ChatContext);\r\n\r\n  // get user information from current user context hook\r\n  const { user } = useContext(CurrentUserContext);\r\n\r\n  // Get listing id from useParams hook (from url)\r\n  const { id } = useParams();\r\n\r\n  // Using useNavigate hook to redirect user to specific page\r\n  const navigate = useNavigate();\r\n\r\n  // Get cached data from react query cache\r\n  const queryClient = useQueryClient();\r\n\r\n  // fetching listing data by listing id\r\n  const { data: listing } = useQuery(\r\n    [\"listing\", id],\r\n    () => fetchListingById(id),\r\n    {\r\n      initialData: () => {\r\n        const listing = queryClient\r\n          .getQueryData(\"listings\")\r\n          ?.find((listing) => listing.id === parseInt(id));\r\n\r\n        if (listing) {\r\n          return {\r\n            data: listing,\r\n          };\r\n        } else {\r\n          return undefined;\r\n        }\r\n      },\r\n    }\r\n  );\r\n\r\n  // get renter id from the listing details\r\n  const renterId = listing?.renterId;\r\n\r\n  // fetch renter information by renter id\r\n  const { data: renter } = useQuery(\r\n    [\"renter\", renterId],\r\n    () => fetchRenter(renterId),\r\n    {\r\n      enabled: !!renterId,\r\n    }\r\n  );\r\n\r\n  // fetch all reservation for this specific listing\r\n  const { data: reservations } = useQuery([\"reservations\", id], () => {\r\n    return fetchReservations(id);\r\n  });\r\n\r\n  return (\r\n    <ListingContainer>\r\n      {listing && renter && reservations ? (\r\n        <ListingWrapper>\r\n          <Banner>\r\n            <BannerImg\r\n              src={\r\n                listing.category === \"surf\"\r\n                  ? beachsurf\r\n                  : listing.category === \"bike\"\r\n                  ? cyclists\r\n                  : listing.category === \"Snow\"\r\n                  ? snow1\r\n                  : surf1\r\n              }\r\n              alt=\"banner\"\r\n            />\r\n            <h2>{listing.name}</h2>\r\n          </Banner>\r\n          <Main>\r\n            <LeftSide>\r\n              <SliderContainer>\r\n                <ImageSlider slides={listing.imageSrc} />\r\n              </SliderContainer>\r\n              <ListingDetails>\r\n                <Description>\r\n                  <span>Description: </span>\r\n                  <p>{listing.description}</p>\r\n                </Description>\r\n                <Model>\r\n                  <span>Model: </span>\r\n                  {listing.model}\r\n                </Model>\r\n                <Size>\r\n                  <span>Size: </span>\r\n                  {listing.size}\r\n                </Size>\r\n                <Reviews\r\n                  currentUserId={user?._id}\r\n                  listingId={id}\r\n                  reviewsIds={listing.reviewsIds}\r\n                />\r\n              </ListingDetails>\r\n            </LeftSide>\r\n            <RightSide>\r\n              <Price>\r\n                <p>${listing.price}</p>\r\n                <span>/Day</span>\r\n              </Price>\r\n              <BookingWrapper>\r\n                <Calendar reservations={reservations} />\r\n                <NavLink\r\n                  to={`/listing/${listing._id}/booking`}\r\n                  onClick={scrollToTop}\r\n                >\r\n                  <BookingBtn>Book</BookingBtn>\r\n                </NavLink>\r\n              </BookingWrapper>\r\n              <RenterContact>\r\n                <NavLink to={`/renter/${renter._id}`} className=\"navlink\">\r\n                  <ProfileImg src={renter.picture} alt=\"renter picture\" />\r\n                </NavLink>\r\n                <ProfileContact>\r\n                  <NavLink to={`/renter/${renter._id}`} className=\"navlink\">\r\n                    <Username>{renter.username}</Username>\r\n                  </NavLink>\r\n                  <Button\r\n                    onClick={() => {\r\n                      if (user) {\r\n                        setOpenChat(true);\r\n                      } else {\r\n                        navigate(\"/login\");\r\n                      }\r\n                    }}\r\n                  >\r\n                    Contact\r\n                  </Button>\r\n                </ProfileContact>\r\n              </RenterContact>\r\n            </RightSide>\r\n          </Main>\r\n          {user && (\r\n            <ChatWrapper>\r\n              <Chat\r\n                picture={renter.picture}\r\n                renterUsername={renter.username}\r\n                renterId={renter._id}\r\n                openChat={openChat}\r\n                setOpenChat={setOpenChat}\r\n                currentUserName={user?.username}\r\n                currentUserPicture={user?.picture}\r\n                currentUserId={user?._id}\r\n              />\r\n            </ChatWrapper>\r\n          )}\r\n        </ListingWrapper>\r\n      ) : (\r\n        <Circles\r\n          height=\"40\"\r\n          width=\"40\"\r\n          color=\"#01010\"\r\n          ariaLabel=\"circles-loading\"\r\n          wrapperClass=\"spinner\"\r\n          visible={true}\r\n        />\r\n      )}\r\n    </ListingContainer>\r\n  );\r\n};\r\n\r\n// listing style\r\nconst ListingContainer = styled.div`\r\n  min-height: 100vh;\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  position: relative;\r\n\r\n  .spinner {\r\n    height: 60vh;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n  }\r\n`;\r\n\r\nconst ListingWrapper = styled.div`\r\n  padding-bottom: 100px;\r\n`;\r\n\r\nconst ChatWrapper = styled.div`\r\n  position: fixed;\r\n  bottom: 24px;\r\n  right: 24px;\r\n`;\r\n\r\nconst Main = styled.div`\r\n  display: flex;\r\n  max-width: 1300px;\r\n  margin: 0 auto;\r\n\r\n  @media screen and (max-width: 700px) {\r\n    flex-direction: column-reverse;\r\n    gap: 20px;\r\n  }\r\n`;\r\n\r\nconst Banner = styled.div`\r\n  height: 160px;\r\n  position: relative;\r\n\r\n  h2 {\r\n    position: absolute;\r\n    top: 50px;\r\n    left: 20px;\r\n    font-size: 35px;\r\n    font-weight: 900;\r\n    text-transform: capitalize;\r\n    color: #242526;\r\n  }\r\n`;\r\n\r\nconst BannerImg = styled.img`\r\n  height: 160px;\r\n  width: 100%;\r\n  object-fit: cover;\r\n  opacity: 0.7;\r\n`;\r\n\r\nconst SliderContainer = styled.div`\r\n  margin-top: 30px;\r\n  width: 85%;\r\n  height: 450px;\r\n  margin: 0 auto;\r\n\r\n  @media screen and (max-width: 700px) {\r\n    height: 250px;\r\n  }\r\n`;\r\n\r\nconst LeftSide = styled.div`\r\n  flex: 0.7;\r\n  width: 80%;\r\n  margin: 30px auto 0 auto;\r\n\r\n  @media screen and (max-width: 700px) {\r\n    margin: 30px auto 10px auto;\r\n  }\r\n`;\r\n\r\nconst RightSide = styled.div`\r\n  flex: 0.3;\r\n  margin: 30px auto 0 auto;\r\n  position: relative;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 40px;\r\n\r\n  @media screen and (max-width: 700px) {\r\n    width: 80%;\r\n  }\r\n`;\r\n\r\nconst ListingDetails = styled.div`\r\n  margin: 30px auto;\r\n  width: 85%;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 20px;\r\n\r\n  span {\r\n    font-weight: 600;\r\n  }\r\n`;\r\n\r\nconst Description = styled.div`\r\n  p {\r\n    white-space: wrap;\r\n    overflow: hidden;\r\n  }\r\n`;\r\n\r\nconst Model = styled.div``;\r\nconst Size = styled.div``;\r\n\r\nconst Price = styled.div`\r\n  display: flex;\r\n  gap: 7px;\r\n\r\n  p {\r\n    font-size: 35px;\r\n    font-weight: 500;\r\n    color: #242526;\r\n  }\r\n\r\n  span {\r\n    padding-top: 3px;\r\n  }\r\n`;\r\n\r\nconst RenterContact = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 20px;\r\n  border-top: 1px solid;\r\n  width: 96%;\r\n  padding-top: 15px;\r\n  padding-left: 5px;\r\n\r\n  @media screen and (max-width: 700px) {\r\n    gap: 40px;\r\n  }\r\n`;\r\n\r\nconst ProfileImg = styled.img`\r\n  width: 150px;\r\n  height: 150px;\r\n  border-radius: 10px;\r\n\r\n  @media screen and (max-width: 1000px) {\r\n    width: 130px;\r\n    height: 130px;\r\n  }\r\n`;\r\n\r\nconst ProfileContact = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: space-between;\r\n  justify-content: space-between;\r\n  gap: 25px;\r\n\r\n  .navlink {\r\n    text-decoration: none;\r\n  }\r\n`;\r\n\r\nconst Username = styled.div`\r\n  font-size: 25px;\r\n  font-weight: 700;\r\n  color: #242526;\r\n  text-transform: capitalize;\r\n`;\r\n\r\nconst Button = styled.button`\r\n  padding: 10px 25px;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n  background: transparent;\r\n  border: 1px solid;\r\n  transition: background 0.5s ease-in-out;\r\n\r\n  :hover {\r\n    background-color: #dadce1;\r\n  }\r\n\r\n  @media screen and (max-width: 700px) {\r\n    padding: 10px 35px;\r\n  }\r\n`;\r\n\r\nconst BookingWrapper = styled.div``;\r\n\r\nconst BookingBtn = styled.button`\r\n  width: 90%;\r\n  padding: 10px 20px;\r\n  font-size: 17px;\r\n  background: #000;\r\n  color: #f5f0ed;\r\n  border-radius: 5px;\r\n  transition: background 0.4s ease-in-out;\r\n  margin-top: 15px;\r\n  cursor: pointer;\r\n\r\n  :hover {\r\n    background: #f5f0ed;\r\n    color: #000;\r\n  }\r\n`;\r\n\r\nexport default Listing;\r\n"],"names":["ChatWrapper","styled","ChatWindow","ChatDiv","MessageWrapper","RightMsg","LeftMsg","MsgDiv","MsgEl","WelcomMsgDiv","WelcomeMsg","Img","Input","SendButton","Msg","Button","picture","renterUsername","openChat","setOpenChat","currentUserName","currentUserPicture","currentUserId","renterId","useState","welcomeMsg","setWelcomeMsg","useContext","ChatContext","currentChatMembers","setCurrentChatMembers","message","setMessage","chatConversation","setChatConversation","notification","setNotification","socket","scrollToBottomRef","useRef","effectRanOnce","useEffect","current","createNewConversationHandler","requestOptions","method","headers","body","JSON","stringify","senderId","receiverId","createAt","Date","now","fetch","process","response","json","parseResponse","status","data","console","log","stack","fechingConversationHandler","fetchConversationByUserId","responseJson","length","findConversation","find","conversation","members","error","emit","on","chatMessagesHandler","_id","includes","sendToId","sendMessageHandler","e","preventDefault","messageinfo","conversationId","text","ok","ref","useClickOutside","scrollIntoView","behavior","src","alt","map","msg","index","onSubmit","value","placeholder","onChange","target","onKeyDown","key","type","className","onClick","SliderStyles","SlideStyle","LeftArrowStyles","RightArrowStyles","DotContainer","Dot","slides","currentIndex","setCurrentIndex","style","backgroundImage","slide","slideIndex","goToSlide","CalenderWrapper","reservations","BookingContext","dateRange","setDateRange","open","setOpen","allDisabledDates","reservation","d1","bookingDate","startDate","slice","d2","endDate","getDatesInRange","flat","format","readOnly","date","selection","ranges","editableDateInputs","moveRangeOnFirstSelection","months","minDate","disabledDates","direction","ReviewContainer","Top","UserPicture","ReviewInfo","ReviewStars","ReviewInfoTop","ReviewSection","review","stars","Array","Number","rating","fill","clientPicture","clientUsername","createdAt","_","Form","TextArea","setReviews","listingId","reviews","user","undefined","starHoverValue","setStarHoverValue","username","clientId","toString","userReview","setUserReview","loading","setLoading","createReviewHandler","prev","cursor","color","name","onMouseOver","onMouseLeave","disabled","trim","height","width","ariaLabel","wrapperClass","visible","reviewsIds","CurrentUserContext","getAllReviewsHandler","AllReviews","parsedAllReviews","ListingContainer","ListingWrapper","Main","Banner","BannerImg","SliderContainer","LeftSide","RightSide","ListingDetails","Description","Model","Size","Price","RenterContact","ProfileImg","ProfileContact","Username","BookingWrapper","BookingBtn","id","useParams","navigate","useNavigate","queryClient","useQueryClient","useQuery","fetchListingById","initialData","listing","getQueryData","parseInt","renter","fetchRenter","enabled","fetchReservations","category","beachsurf","cyclists","snow1","surf1","ImageSlider","imageSrc","description","model","size","price","to","scrollToTop","Chat"],"sourceRoot":""}